{
	"info": {
		"_postman_id": "add1dcc8-8239-4971-9308-70eed8835342",
		"name": "Zemfyre Cloud API - Mock Server",
		"description": "Balena-style Cloud API for IoT Device Management\n\nThis collection includes all endpoints from cloud-postgres.ts with mock examples.\n\n**Base URL**: `http://localhost:3002`\n\n**Authentication**: None (add API keys later for production)\n\n## Endpoints\n\n### Device State Management\n- `GET /api/v1/device/:uuid/state` - Device polling (ETag caching)\n- `PATCH /api/v1/device/state` - Device state reporting\n\n### Device Management\n- `GET /api/v1/devices` - List all devices\n- `GET /api/v1/devices/:uuid` - Get device details\n- `DELETE /api/v1/devices/:uuid` - Delete device\n\n### Target State\n- `GET /api/v1/devices/:uuid/target-state` - Get target state\n- `POST /api/v1/devices/:uuid/target-state` - Set target state\n- `DELETE /api/v1/devices/:uuid/target-state` - Clear target state\n\n### Current State\n- `GET /api/v1/devices/:uuid/current-state` - Get current state\n\n### Logs & Metrics\n- `POST /api/v1/device/:uuid/logs` - Upload logs\n- `GET /api/v1/devices/:uuid/logs` - Get logs\n- `GET /api/v1/devices/:uuid/metrics` - Get metrics",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21270094"
	},
	"item": [
		{
			"name": "Device Polling",
			"item": [
				{
					"name": "Get Device State (Initial)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/device/{{deviceUuid}}/state",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"device",
								"{{deviceUuid}}",
								"state"
							]
						},
						"description": "Device polls for target state. First request returns full state with ETag."
					},
					"response": [
						{
							"name": "200 - Target State Returned",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/device/{{deviceUuid}}/state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"device",
										"{{deviceUuid}}",
										"state"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "ETag",
									"value": "\"v1\""
								}
							],
							"cookie": [],
							"body": "{\n  \"{{deviceUuid}}\": {\n    \"apps\": {\n      \"node-red\": {\n        \"image\": \"nodered/node-red:latest\",\n        \"environment\": {\n          \"TZ\": \"UTC\"\n        },\n        \"ports\": [\n          \"6880:1880\"\n        ]\n      },\n      \"influxdb\": {\n        \"image\": \"influxdb:2.7-alpine\",\n        \"environment\": {\n          \"DOCKER_INFLUXDB_INIT_MODE\": \"setup\",\n          \"DOCKER_INFLUXDB_INIT_USERNAME\": \"admin\",\n          \"DOCKER_INFLUXDB_INIT_PASSWORD\": \"password123\"\n        },\n        \"ports\": [\n          \"8086:8086\"\n        ]\n      }\n    }\n  }\n}"
						},
						{
							"name": "200 - Empty State (New Device)",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/device/{{deviceUuid}}/state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"device",
										"{{deviceUuid}}",
										"state"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "ETag",
									"value": "\"abc123def456\""
								}
							],
							"cookie": [],
							"body": "{\n  \"new-device-uuid\": {\n    \"apps\": {}\n  }\n}"
						},
						{
							"name": "200 - Real Device State",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/device/{{deviceUuid}}f/state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"device",
										"{{deviceUuid}}f",
										"state"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "ETag",
									"value": "\"real-device-v1\""
								}
							],
							"cookie": [],
							"body": "{\n  \"b3b3cb52-e9c8-45be-825c-83a37781307f\": {\n    \"apps\": {\n      \"1\": {\n        \"appId\": 1,\n        \"appName\": \"test-stack\",\n        \"appUuid\": \"test-stack-uuid\",\n        \"services\": [\n          {\n            \"serviceId\": 1,\n            \"serviceName\": \"mosquitto\",\n            \"image\": \"eclipse-mosquitto:2.0\",\n            \"environment\": {},\n            \"ports\": [\"7883:1883\"],\n            \"restart\": \"unless-stopped\"\n          }\n        ]\n      }\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Get Device State (Cached)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "If-None-Match",
								"value": "\"v1\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/device/{{deviceUuid}}/state",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"device",
								"{{deviceUuid}}",
								"state"
							]
						},
						"description": "Subsequent request with ETag. Returns 304 if state unchanged."
					},
					"response": [
						{
							"name": "304 - Not Modified",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "If-None-Match",
										"value": "\"v1\""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/device/{{deviceUuid}}/state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"device",
										"{{deviceUuid}}",
										"state"
									]
								}
							},
							"status": "Not Modified",
							"code": 304,
							"_postman_previewlanguage": "plain",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "Device State Reporting",
			"item": [
				{
					"name": "Report Device State",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"{{deviceUuid}}\": {\n    \"apps\": {\n      \"node-red\": {\n        \"status\": \"running\",\n        \"containerId\": \"f7a3b1c2d3e4\",\n        \"imageId\": \"sha256:abc123\"\n      },\n      \"influxdb\": {\n        \"status\": \"running\",\n        \"containerId\": \"a1b2c3d4e5f6\",\n        \"imageId\": \"sha256:def456\"\n      }\n    },\n    \"config\": {\n      \"hostname\": \"zemfyre-pi-001\",\n      \"timezone\": \"UTC\"\n    },\n    \"ip_address\": \"192.168.1.100\",\n    \"mac_address\": \"b8:27:eb:12:34:56\",\n    \"os_version\": \"Raspberry Pi OS 11\",\n    \"supervisor_version\": \"1.2.3\",\n    \"uptime\": 86400,\n    \"cpu_usage\": 25.5,\n    \"cpu_temp\": 45.2,\n    \"memory_usage\": 512000000,\n    \"memory_total\": 1024000000,\n    \"storage_usage\": 5368709120,\n    \"storage_total\": 32212254720\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/device/state",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"device",
								"state"
							]
						},
						"description": "Device reports its current state, including running apps, metrics, and system info."
					},
					"response": [
						{
							"name": "200 - State Accepted",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"{{deviceUuid}}\": {\n    \"apps\": {\n      \"node-red\": {\n        \"status\": \"running\"\n      }\n    },\n    \"cpu_usage\": 25.5,\n    \"memory_usage\": 512000000\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/device/state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"device",
										"state"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"ok\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Device Management",
			"item": [
				{
					"name": "List All Devices",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/devices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						},
						"description": "Get list of all devices with their current status."
					},
					"response": [
						{
							"name": "200 - Device List",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"devices"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"count\": 3,\n  \"devices\": [\n    {\n      \"uuid\": \"{{deviceUuid}}\",\n      \"device_name\": \"Raspberry Pi 4 - Office\",\n      \"device_type\": \"raspberry-pi-4\",\n      \"is_online\": true,\n      \"last_connectivity_event\": \"2025-10-12T10:30:00Z\",\n      \"ip_address\": \"192.168.1.100\",\n      \"os_version\": \"Raspberry Pi OS 11\",\n      \"supervisor_version\": \"1.2.3\",\n      \"cpu_usage\": 25.5,\n      \"cpu_temp\": 45.2,\n      \"memory_usage\": 512000000,\n      \"memory_total\": 1024000000,\n      \"storage_usage\": 5368709120,\n      \"storage_total\": 32212254720,\n      \"target_apps_count\": 2,\n      \"current_apps_count\": 2,\n      \"last_reported\": \"2025-10-12T10:29:45Z\",\n      \"created_at\": \"2025-10-01T08:00:00Z\"\n    },\n    {\n      \"uuid\": \"xyz-789-uvw-456-rst-123\",\n      \"device_name\": \"Raspberry Pi 3 - Lab\",\n      \"device_type\": \"raspberry-pi-3\",\n      \"is_online\": true,\n      \"last_connectivity_event\": \"2025-10-12T10:28:00Z\",\n      \"ip_address\": \"192.168.1.101\",\n      \"os_version\": \"Raspberry Pi OS 11\",\n      \"supervisor_version\": \"1.2.3\",\n      \"cpu_usage\": 15.2,\n      \"cpu_temp\": 42.0,\n      \"memory_usage\": 256000000,\n      \"memory_total\": 512000000,\n      \"storage_usage\": 3221225472,\n      \"storage_total\": 16106127360,\n      \"target_apps_count\": 1,\n      \"current_apps_count\": 1,\n      \"last_reported\": \"2025-10-12T10:27:30Z\",\n      \"created_at\": \"2025-10-05T14:20:00Z\"\n    },\n    {\n      \"uuid\": \"mno-456-pqr-123-stu-789\",\n      \"device_name\": \"Intel NUC - Gateway\",\n      \"device_type\": \"x86_64\",\n      \"is_online\": false,\n      \"last_connectivity_event\": \"2025-10-11T22:15:00Z\",\n      \"ip_address\": null,\n      \"os_version\": \"Ubuntu 22.04\",\n      \"supervisor_version\": \"1.2.3\",\n      \"cpu_usage\": null,\n      \"cpu_temp\": null,\n      \"memory_usage\": null,\n      \"memory_total\": null,\n      \"storage_usage\": null,\n      \"storage_total\": null,\n      \"target_apps_count\": 3,\n      \"current_apps_count\": 0,\n      \"last_reported\": \"2025-10-11T22:14:45Z\",\n      \"created_at\": \"2025-09-28T09:30:00Z\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "List Online Devices",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/devices?online=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							],
							"query": [
								{
									"key": "online",
									"value": "true"
								}
							]
						},
						"description": "Filter devices by online status."
					},
					"response": [
						{
							"name": "200 - Online Devices Only",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/devices?online=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"devices"
									],
									"query": [
										{
											"key": "online",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"count\": 2,\n  \"devices\": [\n    {\n      \"uuid\": \"{{deviceUuid}}\",\n      \"device_name\": \"Raspberry Pi 4 - Office\",\n      \"is_online\": true\n    },\n    {\n      \"uuid\": \"xyz-789-uvw-456-rst-123\",\n      \"device_name\": \"Raspberry Pi 3 - Lab\",\n      \"is_online\": true\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Get Device Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"{{deviceUuid}}"
							]
						},
						"description": "Get detailed information about a specific device including target and current state."
					},
					"response": [
						{
							"name": "200 - Device Details",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"devices",
										"{{deviceUuid}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"device\": {\n    \"uuid\": \"{{deviceUuid}}\",\n    \"device_name\": \"Raspberry Pi 4 - Office\",\n    \"device_type\": \"raspberry-pi-4\",\n    \"is_online\": true,\n    \"last_connectivity_event\": \"2025-10-12T10:30:00Z\",\n    \"ip_address\": \"192.168.1.100\",\n    \"mac_address\": \"b8:27:eb:12:34:56\",\n    \"os_version\": \"Raspberry Pi OS 11\",\n    \"supervisor_version\": \"1.2.3\",\n    \"cpu_usage\": 25.5,\n    \"cpu_temp\": 45.2,\n    \"memory_usage\": 512000000,\n    \"memory_total\": 1024000000,\n    \"storage_usage\": 5368709120,\n    \"storage_total\": 32212254720,\n    \"created_at\": \"2025-10-01T08:00:00Z\",\n    \"updated_at\": \"2025-10-12T10:30:00Z\"\n  },\n  \"target_state\": {\n    \"apps\": {\n      \"node-red\": {\n        \"image\": \"nodered/node-red:latest\",\n        \"environment\": {\n          \"TZ\": \"UTC\"\n        },\n        \"ports\": [\"6880:1880\"]\n      },\n      \"influxdb\": {\n        \"image\": \"influxdb:2.7-alpine\",\n        \"ports\": [\"8086:8086\"]\n      }\n    },\n    \"config\": {\n      \"hostname\": \"zemfyre-pi-001\",\n      \"timezone\": \"UTC\"\n    },\n    \"version\": 5,\n    \"updated_at\": \"2025-10-12T09:15:00Z\"\n  },\n  \"current_state\": {\n    \"apps\": {\n      \"node-red\": {\n        \"status\": \"running\",\n        \"containerId\": \"f7a3b1c2d3e4\"\n      },\n      \"influxdb\": {\n        \"status\": \"running\",\n        \"containerId\": \"a1b2c3d4e5f6\"\n      }\n    },\n    \"config\": {\n      \"hostname\": \"zemfyre-pi-001\",\n      \"timezone\": \"UTC\"\n    },\n    \"system_info\": {\n      \"uptime\": 86400,\n      \"kernel_version\": \"5.15.0-1027-raspi\"\n    },\n    \"reported_at\": \"2025-10-12T10:29:45Z\"\n  }\n}"
						},
						{
							"name": "404 - Device Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"devices",
										"{{deviceUuid}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"Device not found\",\n  \"message\": \"Device non-existent-uuid not found\"\n}"
						}
					]
				},
				{
					"name": "Delete Device",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"{{deviceUuid}}"
							]
						},
						"description": "Delete a device and all its associated data."
					},
					"response": [
						{
							"name": "200 - Device Deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"devices",
										"{{deviceUuid}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"ok\",\n  \"message\": \"Device deleted\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Target State",
			"item": [
				{
					"name": "Get Target State",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/target-state",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"{{deviceUuid}}",
								"target-state"
							]
						},
						"description": "Get the desired target state for a device."
					},
					"response": [
						{
							"name": "200 - Target State",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/target-state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"devices",
										"{{deviceUuid}}",
										"target-state"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"uuid\": \"{{deviceUuid}}\",\n  \"apps\": {\n    \"node-red\": {\n      \"image\": \"nodered/node-red:latest\",\n      \"environment\": {\n        \"TZ\": \"UTC\"\n      },\n      \"ports\": [\"6880:1880\"],\n      \"restart\": \"unless-stopped\"\n    },\n    \"influxdb\": {\n      \"image\": \"influxdb:2.7-alpine\",\n      \"environment\": {\n        \"DOCKER_INFLUXDB_INIT_MODE\": \"setup\"\n      },\n      \"ports\": [\"8086:8086\"],\n      \"volumes\": [\"influx-data:/var/lib/influxdb2\"]\n    }\n  },\n  \"config\": {\n    \"hostname\": \"zemfyre-pi-001\",\n    \"timezone\": \"UTC\",\n    \"log_level\": \"info\"\n  },\n  \"version\": 5,\n  \"updated_at\": \"2025-10-12T09:15:00Z\"\n}"
						}
					]
				},
				{
					"name": "Set Target State",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apps\": {\n    \"node-red\": {\n      \"image\": \"nodered/node-red:3.1\",\n      \"environment\": {\n        \"TZ\": \"America/New_York\"\n      },\n      \"ports\": [\"6880:1880\"],\n      \"restart\": \"unless-stopped\"\n    },\n    \"influxdb\": {\n      \"image\": \"influxdb:2.7-alpine\",\n      \"environment\": {\n        \"DOCKER_INFLUXDB_INIT_MODE\": \"setup\",\n        \"DOCKER_INFLUXDB_INIT_USERNAME\": \"admin\",\n        \"DOCKER_INFLUXDB_INIT_PASSWORD\": \"changeme123\"\n      },\n      \"ports\": [\"8086:8086\"],\n      \"volumes\": [\"influx-data:/var/lib/influxdb2\"],\n      \"restart\": \"unless-stopped\"\n    },\n    \"grafana\": {\n      \"image\": \"grafana/grafana:latest\",\n      \"environment\": {\n        \"GF_SECURITY_ADMIN_PASSWORD\": \"admin123\"\n      },\n      \"ports\": [\"3000:3000\"],\n      \"volumes\": [\"grafana-data:/var/lib/grafana\"]\n    }\n  },\n  \"config\": {\n    \"hostname\": \"zemfyre-pi-001\",\n    \"timezone\": \"America/New_York\",\n    \"log_level\": \"debug\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/target-state",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"{{deviceUuid}}",
								"target-state"
							]
						},
						"description": "Set the target state for a device. Device will receive this on next poll."
					},
					"response": [
						{
							"name": "200 - Target State Set",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"apps\": {\n    \"node-red\": {\n      \"image\": \"nodered/node-red:3.1\"\n    }\n  },\n  \"config\": {\n    \"hostname\": \"zemfyre-pi-001\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/target-state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"devices",
										"{{deviceUuid}}",
										"target-state"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"ok\",\n  \"message\": \"Target state updated\",\n  \"uuid\": \"{{deviceUuid}}\",\n  \"version\": 6,\n  \"apps\": {\n    \"node-red\": {\n      \"image\": \"nodered/node-red:3.1\"\n    }\n  },\n  \"config\": {\n    \"hostname\": \"zemfyre-pi-001\"\n  }\n}"
						},
						{
							"name": "400 - Invalid Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"invalid\": \"data\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/target-state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"devices",
										"{{deviceUuid}}",
										"target-state"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"Invalid request\",\n  \"message\": \"Body must contain apps object\"\n}"
						}
					]
				},
				{
					"name": "Clear Target State",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/target-state",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"{{deviceUuid}}",
								"target-state"
							]
						},
						"description": "Clear the target state for a device."
					},
					"response": [
						{
							"name": "200 - Target State Cleared",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/target-state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"devices",
										"{{deviceUuid}}",
										"target-state"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"ok\",\n  \"message\": \"Target state cleared\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Current State",
			"item": [
				{
					"name": "Get Current State",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/current-state",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"{{deviceUuid}}",
								"current-state"
							]
						},
						"description": "Get the current state as reported by the device."
					},
					"response": [
						{
							"name": "200 - Current State",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/current-state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"devices",
										"{{deviceUuid}}",
										"current-state"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"apps\": {\n    \"node-red\": {\n      \"status\": \"running\",\n      \"containerId\": \"f7a3b1c2d3e4\",\n      \"imageId\": \"sha256:abc123\",\n      \"created\": \"2025-10-12T08:00:00Z\",\n      \"started\": \"2025-10-12T08:00:05Z\"\n    },\n    \"influxdb\": {\n      \"status\": \"running\",\n      \"containerId\": \"a1b2c3d4e5f6\",\n      \"imageId\": \"sha256:def456\",\n      \"created\": \"2025-10-12T08:00:10Z\",\n      \"started\": \"2025-10-12T08:00:15Z\"\n    },\n    \"grafana\": {\n      \"status\": \"running\",\n      \"containerId\": \"g7h8i9j0k1l2\",\n      \"imageId\": \"sha256:ghi789\",\n      \"created\": \"2025-10-12T08:00:20Z\",\n      \"started\": \"2025-10-12T08:00:25Z\"\n    }\n  },\n  \"config\": {\n    \"hostname\": \"zemfyre-pi-001\",\n    \"timezone\": \"America/New_York\",\n    \"log_level\": \"debug\"\n  },\n  \"system_info\": {\n    \"uptime\": 86400,\n    \"kernel_version\": \"5.15.0-1027-raspi\",\n    \"docker_version\": \"24.0.5\",\n    \"architecture\": \"aarch64\"\n  },\n  \"reported_at\": \"2025-10-12T10:29:45Z\"\n}"
						},
						{
							"name": "404 - No State Reported",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/current-state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"devices",
										"{{deviceUuid}}",
										"current-state"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"No state reported yet\",\n  \"message\": \"Device new-device-uuid has not reported its state yet\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Logs",
			"item": [
				{
					"name": "Upload Device Logs",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"timestamp\": \"2025-10-12T10:30:00Z\",\n    \"message\": \"Node-RED started successfully\",\n    \"service_name\": \"node-red\",\n    \"is_system\": false,\n    \"is_stderr\": false\n  },\n  {\n    \"timestamp\": \"2025-10-12T10:30:15Z\",\n    \"message\": \"InfluxDB initialized\",\n    \"service_name\": \"influxdb\",\n    \"is_system\": false,\n    \"is_stderr\": false\n  },\n  {\n    \"timestamp\": \"2025-10-12T10:30:30Z\",\n    \"message\": \"Warning: High CPU usage detected\",\n    \"service_name\": \"system\",\n    \"is_system\": true,\n    \"is_stderr\": false\n  },\n  {\n    \"timestamp\": \"2025-10-12T10:30:45Z\",\n    \"message\": \"Error: Failed to connect to MQTT broker\",\n    \"service_name\": \"node-red\",\n    \"is_system\": false,\n    \"is_stderr\": true\n  }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/device/{{deviceUuid}}/logs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"device",
								"{{deviceUuid}}",
								"logs"
							]
						},
						"description": "Device uploads log entries to cloud."
					},
					"response": [
						{
							"name": "200 - Logs Received",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"timestamp\": \"2025-10-12T10:30:00Z\",\n    \"message\": \"Node-RED started successfully\",\n    \"service_name\": \"node-red\"\n  }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/device/{{deviceUuid}}/logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"device",
										"{{deviceUuid}}",
										"logs"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"ok\",\n  \"received\": 4\n}"
						}
					]
				},
				{
					"name": "Get Device Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/logs?limit=50&offset=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"{{deviceUuid}}",
								"logs"
							],
							"query": [
								{
									"key": "limit",
									"value": "50",
									"description": "Number of log entries to return (default: 100)"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Offset for pagination (default: 0)"
								},
								{
									"key": "service",
									"value": "node-red",
									"description": "Filter by service name",
									"disabled": true
								}
							]
						},
						"description": "Retrieve logs from a device with pagination and filtering."
					},
					"response": [
						{
							"name": "200 - Device Logs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/logs?limit=50",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"devices",
										"{{deviceUuid}}",
										"logs"
									],
									"query": [
										{
											"key": "limit",
											"value": "50"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"count\": 4,\n  \"logs\": [\n    {\n      \"id\": 1234,\n      \"device_uuid\": \"{{deviceUuid}}\",\n      \"timestamp\": \"2025-10-12T10:30:45Z\",\n      \"message\": \"Error: Failed to connect to MQTT broker\",\n      \"service_name\": \"node-red\",\n      \"is_system\": false,\n      \"is_stderr\": true,\n      \"created_at\": \"2025-10-12T10:30:46Z\"\n    },\n    {\n      \"id\": 1233,\n      \"device_uuid\": \"{{deviceUuid}}\",\n      \"timestamp\": \"2025-10-12T10:30:30Z\",\n      \"message\": \"Warning: High CPU usage detected\",\n      \"service_name\": \"system\",\n      \"is_system\": true,\n      \"is_stderr\": false,\n      \"created_at\": \"2025-10-12T10:30:31Z\"\n    },\n    {\n      \"id\": 1232,\n      \"device_uuid\": \"{{deviceUuid}}\",\n      \"timestamp\": \"2025-10-12T10:30:15Z\",\n      \"message\": \"InfluxDB initialized\",\n      \"service_name\": \"influxdb\",\n      \"is_system\": false,\n      \"is_stderr\": false,\n      \"created_at\": \"2025-10-12T10:30:16Z\"\n    },\n    {\n      \"id\": 1231,\n      \"device_uuid\": \"{{deviceUuid}}\",\n      \"timestamp\": \"2025-10-12T10:30:00Z\",\n      \"message\": \"Node-RED started successfully\",\n      \"service_name\": \"node-red\",\n      \"is_system\": false,\n      \"is_stderr\": false,\n      \"created_at\": \"2025-10-12T10:30:01Z\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Get Logs by Service",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/logs?service=node-red&limit=25",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"{{deviceUuid}}",
								"logs"
							],
							"query": [
								{
									"key": "service",
									"value": "node-red"
								},
								{
									"key": "limit",
									"value": "25"
								}
							]
						},
						"description": "Filter logs by specific service."
					},
					"response": [
						{
							"name": "200 - Filtered Logs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/logs?service=node-red",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"devices",
										"{{deviceUuid}}",
										"logs"
									],
									"query": [
										{
											"key": "service",
											"value": "node-red"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"count\": 2,\n  \"logs\": [\n    {\n      \"id\": 1234,\n      \"service_name\": \"node-red\",\n      \"message\": \"Error: Failed to connect to MQTT broker\",\n      \"is_stderr\": true\n    },\n    {\n      \"id\": 1231,\n      \"service_name\": \"node-red\",\n      \"message\": \"Node-RED started successfully\",\n      \"is_stderr\": false\n    }\n  ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Metrics",
			"item": [
				{
					"name": "Get Device Metrics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/metrics?limit=100",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"{{deviceUuid}}",
								"metrics"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "Number of metric entries to return (default: 100)"
								}
							]
						},
						"description": "Retrieve time-series metrics from a device."
					},
					"response": [
						{
							"name": "200 - Device Metrics",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/devices/{{deviceUuid}}/metrics?limit=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"devices",
										"{{deviceUuid}}",
										"metrics"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"count\": 10,\n  \"metrics\": [\n    {\n      \"id\": 5678,\n      \"device_uuid\": \"{{deviceUuid}}\",\n      \"cpu_usage\": 25.5,\n      \"cpu_temp\": 45.2,\n      \"memory_usage\": 512000000,\n      \"memory_total\": 1024000000,\n      \"storage_usage\": 5368709120,\n      \"storage_total\": 32212254720,\n      \"recorded_at\": \"2025-10-12T10:30:00Z\"\n    },\n    {\n      \"id\": 5677,\n      \"device_uuid\": \"{{deviceUuid}}\",\n      \"cpu_usage\": 22.3,\n      \"cpu_temp\": 44.8,\n      \"memory_usage\": 508000000,\n      \"memory_total\": 1024000000,\n      \"storage_usage\": 5368709120,\n      \"storage_total\": 32212254720,\n      \"recorded_at\": \"2025-10-12T10:29:00Z\"\n    },\n    {\n      \"id\": 5676,\n      \"device_uuid\": \"{{deviceUuid}}\",\n      \"cpu_usage\": 28.1,\n      \"cpu_temp\": 46.5,\n      \"memory_usage\": 515000000,\n      \"memory_total\": 1024000000,\n      \"storage_usage\": 5368709120,\n      \"storage_total\": 32212254720,\n      \"recorded_at\": \"2025-10-12T10:28:00Z\"\n    }\n  ]\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3002"
		},
		{
			"key": "deviceUuid",
			"value": "b3b3cb52-e9c8-45be-825c-83a37781307f"
		}
	]
}