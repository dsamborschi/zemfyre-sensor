# Mosquitto configuration with Go-Auth plugin
# PostgreSQL backend for authentication and ACL

# Basic Mosquitto settings
listener 1883 0.0.0.0
protocol mqtt

listener 9001 0.0.0.0
protocol websockets

# Disable anonymous access (require authentication)
allow_anonymous false

# Logging
log_dest stdout
log_type error
log_type warning
log_type notice
log_type information
log_type debug

# Load Go-Auth plugin
auth_plugin /mosquitto/go-auth.so

# Backend configuration
auth_opt_backends postgres

# PostgreSQL connection settings
auth_opt_pg_host postgres
auth_opt_pg_port 5432
auth_opt_pg_dbname iotistic
auth_opt_pg_user postgres
auth_opt_pg_password postgres
auth_opt_pg_sslmode disable

# User authentication query
# Returns password_hash for the given username
auth_opt_pg_userquery SELECT password_hash FROM mqtt_users WHERE username = $1 AND is_active = true LIMIT 1

# ACL check query (FIXED: Removed GROUP BY to avoid priority column error)
# Returns 1 if user has permission, 0 otherwise
# Checks if there's any ACL entry that grants access
auth_opt_pg_aclquery SELECT COUNT(*) FROM mqtt_acls WHERE username = $1 AND rw >= $2 AND ($3 = topic OR topic = '#' OR $3 LIKE REPLACE(REPLACE(topic, '+', '_'), '#', '%'))

# Superuser query (optional - returns 1 if user is superuser)
auth_opt_pg_superquery SELECT COUNT(*) FROM mqtt_users WHERE username = $1 AND is_superuser = true

# Password hashing
auth_opt_pw_hash_algorithm bcrypt
auth_opt_pw_hash_cost 10

# Cache settings (optional - improves performance)
auth_opt_cache true
auth_opt_cache_reset true
auth_opt_cache_ttl 300

# Logging level (debug for troubleshooting, change to info in production)
auth_opt_log_level debug
auth_opt_log_dest stdout
