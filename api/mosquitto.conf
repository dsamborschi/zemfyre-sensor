# ============================================================================
# Mosquitto Configuration with Go-Auth Plugin
# ============================================================================
# This configuration enables PostgreSQL-based authentication and ACL control
# using the mosquitto-go-auth plugin
#
# Documentation: https://github.com/iegomez/mosquitto-go-auth
# ============================================================================

# Listener configuration
listener 1883 0.0.0.0
protocol mqtt

listener 9001 0.0.0.0
protocol websockets

# Disable anonymous access (require authentication)
allow_anonymous false
allow_zero_length_clientid false

# ============================================================================
# Go-Auth Plugin Configuration
# ============================================================================

# Plugin library path (adjust based on your installation)
# For Docker: usually /usr/lib/mosquitto-go-auth.so or /mosquitto/go-auth.so
#auth_plugin /usr/lib/mosquitto-go-auth.so
auth_plugin /mosquitto/go-auth.so

# Log destination
log_dest stdout
log_type all
log_timestamp true

# ============================================================================
# Authentication Backend: PostgreSQL
# ============================================================================

auth_opt_backends postgres

# PostgreSQL connection
auth_opt_pg_host postgres
auth_opt_pg_port 5432
auth_opt_pg_user postgres
auth_opt_pg_password postgres
auth_opt_pg_dbname iotistic
auth_opt_pg_sslmode disable

# Connection pooling
auth_opt_pg_max_open_conns 20
auth_opt_pg_max_idle_conns 5
auth_opt_pg_conn_max_lifetime 3600

# ============================================================================
# Authentication Query
# ============================================================================
# Query to fetch password hash for a given username
# Returns: password_hash (bcrypt hash)

auth_opt_pg_userquery SELECT password_hash FROM mqtt_users WHERE username = $1 AND is_active = true LIMIT 1

# ============================================================================
# Superuser Query
# ============================================================================
# Query to check if user is a superuser (bypass ACL checks)
# Returns: 1 row if superuser, 0 rows otherwise

auth_opt_pg_superquery SELECT COUNT(*) FROM mqtt_users WHERE username = $1 AND is_superuser = true AND is_active = true

# ============================================================================
# ACL Check Query
# ============================================================================
# Query to check if user has access to a topic
# Parameters: $1 = username, $2 = clientid, $3 = topic, $4 = access (1=read, 2=write)
# Returns: 1 row if access granted, 0 rows otherwise
#
# Priority logic:
#   - Rules with higher priority override lower priority
#   - Username-specific rules override global rules (username IS NULL)
#   - ClientID-specific rules have highest priority

auth_opt_pg_aclquery SELECT COUNT(*) FROM mqtt_acls WHERE (username = $1 OR username IS NULL) AND (clientid = $2 OR clientid IS NULL) AND (topic = $3 OR $3 LIKE REPLACE(REPLACE(REPLACE(topic, '+', '_'), '#', '%'), '_', '[^/]+')) AND (access & $4) = $4 ORDER BY priority DESC LIMIT 1

# Alternative simpler ACL query (less flexible but faster):
# auth_opt_pg_aclquery SELECT COUNT(*) FROM mqtt_acls WHERE (username = $1 OR username IS NULL) AND (clientid = $2 OR clientid IS NULL) AND topic = $3 AND (access & $4) = $4 LIMIT 1

# ============================================================================
# Password Hashing Configuration
# ============================================================================

# Password hasher algorithm
# Options: bcrypt, pbkdf2, argon2
auth_opt_hasher bcrypt

# Bcrypt cost (10 is recommended for production)
auth_opt_hasher_cost 10

# PBKDF2 settings (if using pbkdf2)
# auth_opt_hasher_algorithm sha512
# auth_opt_hasher_iterations 100000
# auth_opt_hasher_keylen 64
# auth_opt_hasher_salt_size 16

# Argon2 settings (if using argon2)
# auth_opt_hasher_argon2_t 3
# auth_opt_hasher_argon2_m 65536
# auth_opt_hasher_argon2_p 4

# ============================================================================
# Cache Configuration (Optional - improves performance)
# ============================================================================

# Enable caching
auth_opt_cache true

# Cache type: go-cache (in-memory) or redis
auth_opt_cache_type go-cache

# Cache TTL (seconds)
auth_opt_cache_reset true
auth_opt_cache_refresh false

# Auth cache: how long to cache successful authentication
auth_opt_auth_cache_seconds 300

# ACL cache: how long to cache ACL decisions
auth_opt_acl_cache_seconds 300

# Redis cache configuration (if using redis)
# auth_opt_cache_type redis
# auth_opt_cache_host redis
# auth_opt_cache_port 6379
# auth_opt_cache_password ""
# auth_opt_cache_db 0

# ============================================================================
# Logging Configuration
# ============================================================================

# Log authentication attempts
auth_opt_log_level debug

# Log destination
log_dest file /var/log/mosquitto/mosquitto.log
log_dest stdout

# Log types
log_type error
log_type warning
log_type notice
log_type information
log_type debug

# Connection logging
connection_messages true

# ============================================================================
# Security & Performance Settings
# ============================================================================

# Max connections
max_connections -1

# Max QoS
max_qos 2

# Message size limits
message_size_limit 10485760

# Persistence
persistence true
persistence_location /mosquitto/data/

# Autosave interval (seconds)
autosave_interval 1800

# ============================================================================
# TLS/SSL Configuration (Optional - enable for production)
# ============================================================================

# Uncomment to enable TLS on port 8883
# listener 8883
# protocol mqtt
# cafile /mosquitto/certs/ca.crt
# certfile /mosquitto/certs/server.crt
# keyfile /mosquitto/certs/server.key
# tls_version tlsv1.2
# require_certificate false

# Uncomment to enable WSS (WebSocket Secure) on port 9002
# listener 9002
# protocol websockets
# cafile /mosquitto/certs/ca.crt
# certfile /mosquitto/certs/server.crt
# keyfile /mosquitto/certs/server.key
# tls_version tlsv1.2

# ============================================================================
# Bridge Configuration (Optional - for multi-broker setups)
# ============================================================================

# Uncomment to bridge to another MQTT broker
# connection bridge-to-cloud
# address cloud.example.com:1883
# topic sensor/# both 0
# topic device/# both 0
# remote_username bridge_user
# remote_password bridge_password
# bridge_protocol_version mqttv311
# try_private false
# cleansession true
