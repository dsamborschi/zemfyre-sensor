- name: Ensure [Time] section exists in timesyncd.conf
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^\[Time\]'
    line: '[Time]'
    create: yes
    state: present

- name: Configure systemd-timesyncd NTP server
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^NTP='
    line: 'NTP={{ ntp_server_ip }}'
    insertafter: '^\[Time\]'
    create: yes

- name: Set fallback NTP servers to Debian pool
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^FallbackNTP='
    line: 'FallbackNTP=0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org 3.debian.pool.ntp.org'
    insertafter: '^\[Time\]'
    create: yes

- name: Allow systemd-timesyncd to handle large offsets (48 hours)
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^RootDistanceMaxSec='
    line: 'RootDistanceMaxSec=172800'
    insertafter: '^\[Time\]'
    create: yes

- name: Enable and start systemd-timesyncd
  systemd:
    name: systemd-timesyncd
    enabled: yes
    state: restarted

# ---------------- Docker Installation ---ss-------------

# - name: Make sure distro package of Docker is absent
#   ansible.builtin.apt:
#     name:
#       - docker
#       - docker-engine
#       - docker.io
#       - containerd
#       - runc
#       - docker-compose
#     state: absent

# - name: Add Docker apt key (x86)
#   ansible.builtin.apt_key:
#     url: https://download.docker.com/linux/debian/gpg
#     state: present
#   when: ansible_architecture == "x86_64"

# - name: Add Docker apt key (Raspberry Pi)
#   ansible.builtin.apt_key:
#     url: https://download.docker.com/linux/raspbian/gpg
#     state: present
#   when: |
#     ansible_architecture == "aarch64" or
#     ansible_architecture == "armv7l" or
#     ansible_architecture == "armv6l"

# - name: Get Debian name
#   ansible.builtin.command: lsb_release -cs
#   register: debian_name
#   changed_when: false

# - name: Check system bit width
#   ansible.builtin.command: getconf LONG_BIT
#   register: system_bits
#   changed_when: false

# - name: Set architecture
#   ansible.builtin.set_fact:
#     architecture: >-
#       {{
#         'amd64' if ansible_architecture == 'x86_64'
#         else ('arm64' if device_type == 'pi4' and system_bits.stdout == '64'
#         else 'armhf')
#       }}
#   when: |
#     device_type == "pi1" or
#     device_type == "pi2" or
#     device_type == "pi3" or
#     device_type == "pi4" or
#     device_type == "x86"

# - name: Set architecture
#   ansible.builtin.set_fact:
#     architecture: "arm64"
#   when: device_type == "pi5"

# - name: Add Docker repo
#   ansible.builtin.lineinfile:
#     path: /etc/apt/sources.list.d/docker.list
#     create: true
#     line: "deb [arch={{ architecture }}] https://download.docker.com/linux/debian {{ debian_name.stdout }} stable"
#     state: present
#     owner: root
#     group: root
#     mode: "0644"

# - name: Install Docker
#   ansible.builtin.apt:
#     name:
#       - docker-ce:{{ architecture }}
#       - docker-ce-cli:{{ architecture }}
#       - docker-compose-plugin:{{ architecture }}
#     update_cache: true
#     install_recommends: false

# - name: Add user to Docker group (all platforms)
#   ansible.builtin.user:
#     name: "{{ lookup('env', 'USER') }}"
#     group: "{{ lookup('env', 'USER') }}"
#     groups:
#       - docker
#       - adm
#       - sudo
#       - video
#       - plugdev
#       - users
#       - input
#       - netdev
#       - dialout

# - name: Add user to Docker group (Raspberry Pi)
#   ansible.builtin.user:
#     name: "{{ lookup('env', 'USER') }}"
#     group: "{{ lookup('env', 'USER') }}"
#     groups:
#       - docker
#       - adm
#       - sudo
#       - video
#       - plugdev
#       - users
#       - input
#       - netdev
#       - gpio
#       - dialout
#   when: |
#     ansible_architecture == "aarch64" or
#     ansible_architecture == "armv7l" or
#     ansible_architecture == "armv6l"

# ---------------- Docker Compose V2 Plugin -----------------

- name: Create CLI plugins directory
  file:
    path: "/usr/local/lib/docker/cli-plugins"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Download Docker Compose V2 binary (Raspberry Pi)
  get_url:
    url: "https://github.com/docker/compose/releases/download/v2.28.2/docker-compose-linux-aarch64"
    dest: "/usr/local/lib/docker/cli-plugins/docker-compose"
    mode: '0755'
    owner: root
    group: root

- name: Verify docker-compose version
  command: appengine compose version

- name: Perform system upgrade
  ansible.builtin.apt:
    upgrade: dist
  tags:
    - system-upgrade

- name: Clean up unused packages
  ansible.builtin.apt:
    autoremove: true
  tags:
    - system-upgrade

- name: Remove deprecated pip dependencies (<= Debian 11)
  ansible.builtin.pip:
    name: supervisor
    state: absent
  when:
    - ansible_distribution_major_version | int <= 11

- name: Remove deprecated pip dependencies (>= Debian 12)
  ansible.builtin.pip:
    name: supervisor
    executable: /home/{{ lookup('env', 'USER') }}/installer_venv/bin/pip
    state: absent
  when:
    - ansible_distribution_major_version | int >= 12