- name: Ensure [Time] section exists in timesyncd.conf
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^\[Time\]'
    line: '[Time]'
    create: yes
    state: present

- name: Configure systemd-timesyncd NTP server
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^NTP='
    line: 'NTP={{ ntp_server_ip }}'
    insertafter: '^\[Time\]'
    create: yes

- name: Set fallback NTP servers to Debian pool
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^FallbackNTP='
    line: 'FallbackNTP=0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org 3.debian.pool.ntp.org'
    insertafter: '^\[Time\]'
    create: yes

- name: Allow systemd-timesyncd to handle large offsets (48 hours)
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^RootDistanceMaxSec='
    line: 'RootDistanceMaxSec=172800'
    insertafter: '^\[Time\]'
    create: yes

- name: Enable and start systemd-timesyncd
  systemd:
    name: systemd-timesyncd
    enabled: yes
    state: restarted

# ---------------- Docker Installation ----------------
- name: Ensure old Docker packages are absent
  apt:
    name:
      - docker
      - docker-engine
      - docker.io
      - containerd
      - runc
      - docker-compose
    state: absent
    purge: yes

- name: Add Docker apt key
  apt_key:
    url: >-
      {% if ansible_architecture in ['aarch64','armv7l','armv6l'] %}
        https://download.docker.com/linux/raspbian/gpg
      {% elif ansible_distribution == 'Ubuntu' %}
        https://download.docker.com/linux/ubuntu/gpg
      {% else %}
        https://download.docker.com/linux/debian/gpg
      {% endif %}
    state: present

- name: Get Debian/Ubuntu codename
  command: lsb_release -cs
  register: distro_codename
  changed_when: false

- name: Set architecture fact
  set_fact:
    architecture: >-
      {% if ansible_architecture == 'x86_64' %}
        amd64
      {% elif device_type == 'pi5' %}
        arm64
      {% elif device_type in ['pi4','pi3','pi2','pi1'] and ansible_machine in ['aarch64','armv7l','armv6l'] %}
        {% if device_type == 'pi4' and ansible_architecture == 'aarch64' %}
          arm64
        {% else %}
          armhf
        {% endif %}
      {% else %}
        amd64
      {% endif %}

- name: Add Docker repository
  lineinfile:
    path: /etc/apt/sources.list.d/docker.list
    create: yes
    line: >-
      deb [arch={{ architecture }}] 
      {% if ansible_architecture in ['aarch64','armv7l','armv6l'] %}
        https://download.docker.com/linux/raspbian {{ distro_codename.stdout }} stable
      {% elif ansible_distribution == 'Ubuntu' %}
        https://download.docker.com/linux/ubuntu {{ distro_codename.stdout }} stable
      {% else %}
        https://download.docker.com/linux/debian {{ distro_codename.stdout }} stable
      {% endif %}
    state: present
    owner: root
    group: root
    mode: '0644'

- name: Install Docker packages
  apt:
    name:
      - docker-ce:{{ architecture }}
      - docker-ce-cli:{{ architecture }}
      - docker-compose-plugin:{{ architecture }}
    update_cache: yes
    install_recommends: no

- name: Add user to Docker group (all platforms)
  user:
    name: "{{ lookup('env','USER') }}"
    group: "{{ lookup('env','USER') }}"
    groups:
      - docker
      - adm
      - sudo
      - video
      - plugdev
      - users
      - input
      - netdev
      - dialout
    append: yes

- name: Add GPIO group for Raspberry Pi
  user:
    name: "{{ lookup('env','USER') }}"
    group: "{{ lookup('env','USER') }}"
    groups:
      - gpio
    append: yes
  when: device_type in ['pi1','pi2','pi3','pi4','pi5']

# ---------------- System Upgrade & Cleanup ----------------
- name: Perform system upgrade
  apt:
    upgrade: dist
  tags:
    - system-upgrade

- name: Clean up unused packages
  apt:
    autoremove: yes
  tags:
    - system-upgrade

- name: Remove deprecated pip dependencies (<= Debian 11)
  pip:
    name: supervisor
    state: absent
  when: ansible_distribution_major_version | int <= 11

- name: Remove deprecated pip dependencies (>= Debian 12)
  pip:
    name: supervisor
    executable: /home/{{ lookup('env','USER') }}/installer_venv/bin/pip
    state: absent
  when: ansible_distribution_major_version | int >= 12
