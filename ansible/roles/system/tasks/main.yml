- name: Ensure [Time] section exists in timesyncd.conf
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^\[Time\]'
    line: '[Time]'
    create: yes
    state: present

- name: Configure systemd-timesyncd NTP server
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^NTP='
    line: 'NTP={{ ntp_server_ip }}'
    insertafter: '^\[Time\]'
    create: yes

- name: Set fallback NTP servers to Debian pool
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^FallbackNTP='
    line: 'FallbackNTP=0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org 3.debian.pool.ntp.org'
    insertafter: '^\[Time\]'
    create: yes

- name: Allow systemd-timesyncd to handle large offsets (48 hours)
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^RootDistanceMaxSec='
    line: 'RootDistanceMaxSec=172800'
    insertafter: '^\[Time\]'
    create: yes

- name: Enable and start systemd-timesyncd
  ansible.builtin.systemd:
    name: systemd-timesyncd
    enabled: yes
    state: restarted
  ignore_errors: true

# ---------------- Docker Installation ----------------

# Pre-flight: Remove old/malformed Docker repo files
- name: Remove old docker.list (pre-flight)
  ansible.builtin.file:
    path: /etc/apt/sources.list.d/docker.list
    state: absent
  ignore_errors: true

# Determine system codename
- name: Get system codename (robust detection)
  ansible.builtin.shell: |
    if command -v lsb_release >/dev/null 2>&1; then
      lsb_release -cs
    elif [ -f /etc/os-release ]; then
      . /etc/os-release
      echo "$VERSION_CODENAME"
    else
      echo "bookworm"  # default fallback for Debian 12+
    fi
  register: debian_name
  changed_when: false

# Normalize codename for Docker repos
- name: Map unsupported codenames to supported Docker repos
  ansible.builtin.set_fact:
    docker_codename: >-
      {% if debian_name.stdout in ['noble', 'trixie', 'testing', 'sid'] %}
        bookworm
      {% elif debian_name.stdout == 'jammy' %}
        bullseye
      {% else %}
        {{ debian_name.stdout }}
      {% endif %}

# Debug
- ansible.builtin.debug:
    msg: "Using Docker codename '{{ docker_codename }}' for '{{ debian_name.stdout }}'"

# Ensure keyrings directory exists
- name: Ensure /etc/apt/keyrings exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

# Download Docker GPG key
- name: Download Docker GPG key
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/debian/gpg
    dest: /etc/apt/keyrings/docker.gpg
    mode: '0644'

# Add Docker repository safely
- name: Add Docker repository
  ansible.builtin.lineinfile:
    path: /etc/apt/sources.list.d/docker.list
    create: yes
    line: "deb [arch={{ architecture }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian {{ docker_codename | trim }} stable"
    insertafter: EOF
    state: present

# Update apt cache
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: yes

# Check if Docker is installed
- name: Check if Docker is installed
  ansible.builtin.command: docker --version
  register: docker_version
  ignore_errors: true
  changed_when: false

- name: Display Docker version if installed
  ansible.builtin.debug:
    msg: "Docker already installed: {{ docker_version.stdout }}"
  when: docker_version.rc == 0

# Install Docker using official convenience script if not installed
- name: Install Docker
  ansible.builtin.shell: |
    curl -fsSL https://get.docker.com -o /tmp/get-docker.sh
    sh /tmp/get-docker.sh
    rm /tmp/get-docker.sh
  when: docker_version.rc != 0
  register: docker_install
  changed_when: true

- name: Display Docker installation output
  ansible.builtin.debug:
    msg: "{{ docker_install.stdout_lines }}"
  when: docker_version.rc != 0 and docker_install.stdout_lines is defined

# Verify Docker installation
- name: Verify Docker installation
  ansible.builtin.command: docker --version
  register: docker_verify
  changed_when: false

- name: Display Docker version after installation
  ansible.builtin.debug:
    msg: "âœ… Docker installed: {{ docker_verify.stdout }}"

# Ensure Docker service is enabled and running
- name: Enable and start Docker service
  ansible.builtin.systemd:
    name: docker
    enabled: true
    state: started

# Add user to Docker group
- name: Add current user to Docker group
  ansible.builtin.user:
    name: "{{ lookup('env', 'USER') }}"
    groups: docker
    append: true



- name: Perform system upgrade
  ansible.builtin.apt:
    upgrade: dist
  tags:
    - system-upgrade


- name: Clean up unused packages
  ansible.builtin.apt:
    autoremove: true
  tags:
    - system-upgrade

- name: Remove deprecated pip dependencies (>= Debian 12)
  ansible.builtin.pip:
    name: supervisor
    executable: "{{ lookup('env', 'HOME') }}/installer_venv/bin/pip"
    state: absent
  when:
    - ansible_distribution_major_version | int >= 12
    - lookup('env', 'HOME') is defined
    - (lookup('env', 'HOME') + '/installer_venv/bin/pip') is file