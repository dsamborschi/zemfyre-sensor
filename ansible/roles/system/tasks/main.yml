- name: Ensure [Time] section exists in timesyncd.conf
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^\[Time\]'
    line: '[Time]'
    create: yes
    state: present

- name: Configure systemd-timesyncd NTP server
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^NTP='
    line: 'NTP={{ ntp_server_ip }}'
    insertafter: '^\[Time\]'
    create: yes

- name: Set fallback NTP servers to Debian pool
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^FallbackNTP='
    line: 'FallbackNTP=0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org 3.debian.pool.ntp.org'
    insertafter: '^\[Time\]'
    create: yes

- name: Allow systemd-timesyncd to handle large offsets (48 hours)
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^RootDistanceMaxSec='
    line: 'RootDistanceMaxSec=172800'
    insertafter: '^\[Time\]'
    create: yes

- name: Enable and start systemd-timesyncd
  ansible.builtin.systemd:
    name: systemd-timesyncd
    enabled: yes
    state: restarted
  ignore_errors: true

# ---------------- Docker Installation (universal: CI + direct devices) ----------------

# Detect architecture if not provided (for direct installs)
- name: Detect architecture if TARGET_ARCH is not set
  ansible.builtin.set_fact:
    detected_arch: "{{ ansible_architecture }}"
  when: TARGET_ARCH is not defined

- name: Determine architecture for Docker packages
  ansible.builtin.set_fact:
    architecture: >-
      {% if (TARGET_ARCH | default(detected_arch)) == 'x86_64' %}
        amd64
      {% elif (TARGET_ARCH | default(detected_arch)) in ['aarch64', 'arm64'] %}
        arm64
      {% elif (TARGET_ARCH | default(detected_arch)) in ['armv7l', 'armv6l'] %}
        armhf
      {% else %}
        amd64
      {% endif %}

# Map unsupported Debian codenames (for Ubuntu, Pi OS, or testing)
- name: Normalize codename to supported Docker repos
  ansible.builtin.set_fact:
    docker_codename: >-
      {% set codename = debian_name.stdout | default(ansible_distribution_release) %}
      {% if codename in ['noble', 'trixie', 'testing', 'sid'] %}
        bookworm
      {% elif codename == 'jammy' %}
        bullseye
      {% else %}
        {{ codename }}
      {% endif %}

- name: Debug codename and architecture
  ansible.builtin.debug:
    msg: "Installing Docker for '{{ docker_codename }}' [arch={{ architecture }}]"

# Backward-compatible key handling (works for Debian < 12 and >= 12)
- name: Add Docker GPG key (modern method, fallback for old distros)
  block:
    - name: Try modern GPG method
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/debian/gpg
        dest: /usr/share/keyrings/docker-archive-keyring.gpg
        mode: '0644'
      register: gpg_key_result
      ignore_errors: true

    - name: Fallback to apt-key if modern method fails
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present
      when: gpg_key_result is failed

# Add Docker apt repository
- name: Add Docker apt repository
  ansible.builtin.apt_repository:
    repo: "deb [arch={{ architecture }} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian {{ docker_codename }} stable"
    state: present
    filename: docker
  ignore_errors: true  # allows fallback installs if repo setup fails temporarily

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: yes

# Try to detect if Docker is already installed
- name: Check if Docker is already installed
  ansible.builtin.command: docker --version
  register: docker_version
  ignore_errors: true
  changed_when: false

- name: Install Docker Engine and dependencies (if not installed)
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
  when: docker_version.rc != 0
  register: docker_install

- name: Display Docker installation result
  ansible.builtin.debug:
    msg: "{{ docker_install if docker_version.rc != 0 else 'Docker already installed' }}"

- name: Ensure Docker service is enabled and started
  ansible.builtin.systemd:
    name: docker
    enabled: true
    state: started

- name: Add user to docker group
  ansible.builtin.user:
    name: "{{ lookup('env', 'USER') }}"
    groups: docker
    append: true


- name: Perform system upgrade
  ansible.builtin.apt:
    upgrade: dist
  tags:
    - system-upgrade

- name: Clean up unused packages
  ansible.builtin.apt:
    autoremove: true
  tags:
    - system-upgrade

- name: Remove deprecated pip dependencies (>= Debian 12)
  ansible.builtin.pip:
    name: supervisor
    executable: "{{ lookup('env', 'HOME') }}/installer_venv/bin/pip"
    state: absent
  when:
    - ansible_distribution_major_version | int >= 12
    - lookup('env', 'HOME') is defined
    - (lookup('env', 'HOME') + '/installer_venv/bin/pip') is file