- name: Ensure [Time] section exists in timesyncd.conf
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^\[Time\]'
    line: '[Time]'
    create: yes
    state: present

- name: Configure systemd-timesyncd NTP server
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^NTP='
    line: 'NTP={{ ntp_server_ip }}'
    insertafter: '^\[Time\]'
    create: yes

- name: Set fallback NTP servers to Debian pool
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^FallbackNTP='
    line: 'FallbackNTP=0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org 3.debian.pool.ntp.org'
    insertafter: '^\[Time\]'
    create: yes

- name: Allow systemd-timesyncd to handle large offsets (48 hours)
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^RootDistanceMaxSec='
    line: 'RootDistanceMaxSec=172800'
    insertafter: '^\[Time\]'
    create: yes

- name: Enable and start systemd-timesyncd
  ansible.builtin.systemd:
    name: systemd-timesyncd
    enabled: yes
    state: restarted
  ignore_errors: true

# ---------------- Docker Installation ----------------

# ---------------- Docker Installation ----------------

# Pre-flight: Remove any malformed docker.list
- name: Remove old docker.list if exists
  ansible.builtin.file:
    path: /etc/apt/sources.list.d/docker.list
    state: absent
  ignore_errors: true

# Get system codename
- name: Get system codename
  ansible.builtin.command: lsb_release -cs
  register: debian_name
  changed_when: false

# Map unsupported codenames to Docker-supported ones
- name: Set Docker codename
  ansible.builtin.set_fact:
    docker_codename: >-
      {% if debian_name.stdout in ['noble', 'trixie', 'testing', 'sid'] %}
        bookworm
      {% elif debian_name.stdout == 'jammy' %}
        bullseye
      {% else %}
        {{ debian_name.stdout }}
      {% endif %}

- name: Debug Docker codename
  ansible.builtin.debug:
    msg: "Using Docker codename '{{ docker_codename }}'"

# Determine architecture
- name: Set Docker architecture
  ansible.builtin.set_fact:
    architecture: >-
      {% if ansible_architecture == 'x86_64' %}
        amd64
      {% elif ansible_architecture in ['aarch64', 'arm64'] %}
        arm64
      {% elif ansible_architecture in ['armv7l', 'armv6l'] %}
        armhf
      {% else %}
        amd64
      {% endif %}

- name: Ensure Docker apt keyrings directory exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
    owner: root
    group: root

# Download Docker GPG key (avoids deprecated apt-key)
- name: Add Docker GPG key
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/debian/gpg
    dest: /etc/apt/keyrings/docker.gpg
    mode: '0644'

# Add Docker repository
- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: "deb [arch={{ architecture }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian {{ docker_codename }} stable"
    state: present

# Update apt cache
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600

# Check if Docker is installed
- name: Check Docker version
  ansible.builtin.command: docker --version
  register: docker_version
  ignore_errors: true
  changed_when: false

- name: Install Docker if not present
  ansible.builtin.apt:
    name: docker-ce,docker-ce-cli,containerd.io
    state: present
  when: docker_version.rc != 0
  notify: Restart Docker

- name: Add user to docker group
  ansible.builtin.user:
    name: "{{ lookup('env','USER') }}"
    groups: docker
    append: true

# Ensure Docker service is running
- name: Ensure Docker service is enabled and started
  ansible.builtin.systemd:
    name: docker
    enabled: true
    state: started



- name: Perform system upgrade
  ansible.builtin.apt:
    upgrade: dist
  tags:
    - system-upgrade

- name: Clean up unused packages
  ansible.builtin.apt:
    autoremove: true
  tags:
    - system-upgrade

- name: Remove deprecated pip dependencies (>= Debian 12)
  ansible.builtin.pip:
    name: supervisor
    executable: "{{ lookup('env', 'HOME') }}/installer_venv/bin/pip"
    state: absent
  when:
    - ansible_distribution_major_version | int >= 12
    - lookup('env', 'HOME') is defined
    - (lookup('env', 'HOME') + '/installer_venv/bin/pip') is file