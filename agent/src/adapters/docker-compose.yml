version: '3.8'

services:
  modbus-adapter:
    build: .
    container_name: modbus-adapter
    volumes:
      - ./config:/app/config:ro
      - sensor-sockets:/tmp/sensors
      - /dev:/dev  # For serial devices
    devices:
      - "/dev/ttyUSB0:/dev/ttyUSB0"  # Example serial device
    environment:
      - LOG_LEVEL=info
    networks:
      - iotistic-net
    restart: unless-stopped
    depends_on:
      - mosquitto
    healthcheck:
      test: ["CMD", "node", "-e", "const fs = require('fs'); process.exit(fs.existsSync('/tmp/sensors/modbus.sock') ? 0 : 1);"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Example agent service that consumes modbus data
  agent:
    image: iotistic/agent:latest
    container_name: iotistic-agent
    depends_on:
      - modbus-adapter
      - mosquitto
    volumes:
      - sensor-sockets:/tmp/sensors
    environment:
      - ENABLE_SENSOR_PUBLISH=true
      - MQTT_BROKER=mqtt://mosquitto:1883
      - SENSOR_PUBLISH_CONFIG={"sensors":[{"name":"modbus-sensors","addr":"/tmp/sensors/modbus.sock","eomDelimiter":"\\n","mqttTopic":"sensor/modbus","bufferSize":100,"bufferTimeMs":1000}]}
    networks:
      - iotistic-net
    restart: unless-stopped

  # MQTT broker for agent communication
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
    networks:
      - iotistic-net
    restart: unless-stopped

volumes:
  sensor-sockets:
    driver: local

networks:
  iotistic-net:
    driver: bridge