services:
    device-agent:
        container_name: agent
        image: iotistic/agent:${DOCKER_TAG}-${DEVICE_TYPE}
        build:
            context: ./agent
            dockerfile: Dockerfile
        privileged: true
        pid: "host"
        tty: true
        restart: always
        network_mode: host
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - device-agent-data:/app/data
        environment:
          - USE_REAL_DOCKER=true
          - NODE_ENV=production
          - DATABASE_PATH=/app/data/database.sqlite
          - MQTT_BROKER=mqtt://mosquitto:1883
          - ENABLE_FILE_LOGGING=false
          - MAX_LOGS=500
          - CLOUD_API_ENDPOINT=http://localhost:3002
          - DEVICE_API_PORT=48484
          # SSH Reverse Tunnel (Remote Access)
          - ENABLE_REMOTE_ACCESS=${ENABLE_REMOTE_ACCESS:-false}
          - CLOUD_HOST=${CLOUD_HOST:-}
          - CLOUD_SSH_PORT=${CLOUD_SSH_PORT:-22}
          - SSH_TUNNEL_USER=${SSH_TUNNEL_USER:-tunnel}
          - SSH_KEY_PATH=${SSH_KEY_PATH:-/app/data/ssh/id_rsa}
          - SSH_AUTO_RECONNECT=${SSH_AUTO_RECONNECT:-true}
          - SSH_RECONNECT_DELAY=${SSH_RECONNECT_DELAY:-5000}

    nginx:
        image: nginx
        ports:
        - "80:80"
        command: ["nginx", "-g", "daemon off;"]
        restart: unless-stopped
        volumes:
        - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
        networks:
           - zemfyre-net
    mosquitto:
        image: eclipse-mosquitto
        restart: always
        ports:
          - "${MOSQUITTO_PORT_EXT:-1883}:1883"
          - "${MOSQUITTO_WS_PORT_EXT:-59001}:9001"
        volumes:
          - ./mosquitto/config:/mosquitto/config/
        networks:
           - zemfyre-net
    nodered:
        image: iotistic/zemfyre-nodered:${DOCKER_TAG}-${DEVICE_TYPE}
        build:
            context: ./nodered
            dockerfile: Dockerfile
        restart: always
        ports:
            - "${NODERED_PORT_EXT:-51880}:1880"
        volumes:
            - ./nodered/data:/data
            - ./nodered/nodes:/data/nodes
            - /data/node_modules
        networks:
           - zemfyre-net

    influx:
        container_name: influxdb
        image: influxdb:alpine
        restart: always
        environment:
            - INFLUXDB_INIT_ORG=Zemfyre
            - INFLUXDB_INIT_BUCKET=ZUS80LP
            - INFLUXDB_LOG_LEVEL=debug
        ports:
            - "${INFLUXDB_PORT_EXT:-58086}:8086"
        volumes:
            - ./influx/data:/var/lib/influxdb2
            - ./influx/config:/etc/influxdb2
        networks:
           - zemfyre-net

    grafana:
        image: iotistic/zemfyre-grafana:${DOCKER_TAG}-${DEVICE_TYPE}
        build:
           context: ./grafana
           dockerfile: Dockerfile
        depends_on:
            - influx
        container_name: grafana
        restart: always
   
        user: "grafana"
        environment:
            - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
            - GF_AUTH_ANONYMOUS_ENABLED=${GRAFANA_AUTH_ANONYMOUS_ENABLED}
            - GF_AUTH_ANONYMOUS_ORG_ROLE=${GRAFANA_AUTH_ANONYMOUS_ORG_ROLE}
            - GF_AUTH_DISABLE_LOGIN_FORM=${GRAFANA_AUTH_DISABLE_LOGIN_FORM}
            - GF_HTTP_ALLOW_ORIGIN=*
        ports:
            - "${GRAFANA_PORT_EXT:-53000}:3000"
        networks:
           - zemfyre-net


    postgres:
        image: postgres:16-alpine
        container_name: zemfyre-postgres
        restart: unless-stopped
        environment:
            - POSTGRES_DB=zemfyre
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
            - POSTGRES_INITDB_ARGS=-E UTF8
        ports:
            - "${DB_PORT_EXT:-5432}:5432"
        volumes:
            - zemfyre-pg-data:/var/lib/postgresql/data
            - ./api/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
           - zemfyre-net

    api:
        image: iotistic/zemfyre-api:${DOCKER_TAG}-${DEVICE_TYPE}
        build:
            context: ./api
            dockerfile: Dockerfile
        container_name: zemfyre-api
        restart: always
        environment:
            - PORT=3002
            - NODE_ENV=production
            - USE_POSTGRES=${USE_POSTGRES:-false}
            - DB_HOST=postgres
            - DB_PORT=5432
            - DB_NAME=zemfyre
            - DB_USER=postgres
            - DB_PASSWORD=${DB_PASSWORD:-postgres}
            - DB_POOL_SIZE=20
            - GRAFANA_API_TOKEN=${GRAFANA_API_TOKEN}
            - DISPLAY=${DISPLAY}
            - DBUS_SESSION_BUS_ADDRESS=${DBUS_SESSION_BUS_ADDRESS}
        volumes:
          - /tmp/.X11-unix:/tmp/.X11-unix  # for X11
          - /run/user/1000/bus:/run/user/1000/bus  # for D-Bus socket
          - /var/run/docker.sock:/var/run/docker.sock:ro
        user: "1000:1000"
        ports:
            - "${API_PORT_EXT:-3002}:3002"
        depends_on:
            postgres:
                condition: service_healthy
        networks:
           - zemfyre-net
volumes:
  device-agent-data:
    name: device-agent-data
    driver: local
  zemfyre-pg-data:
    driver: local
 
networks:
  zemfyre-net:
    driver: bridge


