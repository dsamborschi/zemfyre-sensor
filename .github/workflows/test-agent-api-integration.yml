name: Test Agent-API Integration

on:
  push:
    branches:
      - master
    paths:
      - 'agent/**'
      - 'api/**'
      - '.github/workflows/test-agent-api-integration.yml'
  pull_request:
    branches:
      - master
    paths:
      - 'agent/**'
      - 'api/**'

jobs:
  integration-test:
    name: Agent-API Integration Tests
    runs-on: ubuntu-24.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            agent/package-lock.json
            api/package-lock.json

      - name: Install API dependencies
        working-directory: ./api
        run: npm ci

      - name: Install Agent dependencies
        working-directory: ./agent
        run: npm ci

      - name: Build API
        working-directory: ./api
        run: npm run build

      - name: Build Agent
        working-directory: ./agent
        run: npm run build

      - name: Start API Server
        working-directory: ./api
        run: |
          PORT=3002 node dist/index.js &
          API_PID=$!
          echo "API_PID=$API_PID" >> $GITHUB_ENV
        env:
          NODE_ENV: test

      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to be ready on port 3002..."
          timeout 30 bash -c 'until curl -f http://localhost:3002/ > /dev/null 2>&1; do sleep 1; done' || exit 1
          echo "API is ready!"

      - name: Test API Health
        run: |
          echo "Testing API root endpoint..."
          RESPONSE=$(curl -s http://localhost:3002/)
          echo "Response: $RESPONSE"
          echo "$RESPONSE" | jq -e '.status == "ok"' || exit 1
          echo "✅ API health check passed"

      - name: Test API Documentation
        run: |
          echo "Testing API documentation endpoint..."
          RESPONSE=$(curl -s http://localhost:3002/api/docs)
          echo "$RESPONSE" | jq -e '.version' || exit 1
          echo "✅ API documentation endpoint works"

      - name: Test Cloud Device Management Endpoints
        run: |
          echo "Testing device registration..."
          TEST_UUID="test-device-$(date +%s)"
          
          # Test device state polling (should return 404 for new device)
          echo "Testing device polling endpoint..."
          curl -s -w "\nHTTP Status: %{http_code}\n" http://localhost:3002/api/v1/device/$TEST_UUID/state || true
          
          # Test device state reporting
          echo "Testing device state reporting..."
          curl -X PATCH -H "Content-Type: application/json" \
            -d '{"uuid":"'$TEST_UUID'","status":"online","services":{},"metrics":{"cpu":10.5,"memory":50.2}}' \
            http://localhost:3002/api/v1/device/state
          
          # Test device list
          echo "Testing device list..."
          DEVICES=$(curl -s http://localhost:3002/api/v1/devices)
          echo "Devices: $DEVICES"
          
          # Test setting target state
          echo "Testing target state setting..."
          curl -X POST -H "Content-Type: application/json" \
            -d '{"services":{"web":{"image":"nginx:latest"}}}' \
            http://localhost:3002/api/v1/devices/$TEST_UUID/target-state
          
          # Test getting target state
          echo "Testing target state retrieval..."
          TARGET_STATE=$(curl -s http://localhost:3002/api/v1/devices/$TEST_UUID/target-state)
          echo "Target state: $TARGET_STATE"
          
          # Test polling with ETag
          echo "Testing device polling with ETag..."
          RESPONSE=$(curl -s -D - http://localhost:3002/api/v1/device/$TEST_UUID/state)
          echo "$RESPONSE"
          
          echo "✅ Cloud device management endpoints work"

      - name: Test Device Polling with ETag Caching
        run: |
          TEST_UUID="etag-test-$(date +%s)"
          
          # Set target state
          curl -X POST -H "Content-Type: application/json" \
            -d '{"services":{"test":{"image":"alpine:latest"}}}' \
            http://localhost:3002/api/v1/devices/$TEST_UUID/target-state
          
          # First poll - should get 200 with ETag
          echo "First poll - expecting 200 with ETag..."
          RESPONSE=$(curl -s -D - http://localhost:3002/api/v1/device/$TEST_UUID/state)
          ETAG=$(echo "$RESPONSE" | grep -i "etag:" | awk '{print $2}' | tr -d '\r')
          echo "Got ETag: $ETAG"
          
          # Second poll with same ETag - should get 304 Not Modified
          echo "Second poll with If-None-Match - expecting 304..."
          STATUS=$(curl -s -w "%{http_code}" -o /dev/null -H "If-None-Match: $ETAG" \
            http://localhost:3002/api/v1/device/$TEST_UUID/state)
          
          if [ "$STATUS" = "304" ]; then
            echo "✅ ETag caching works correctly (got 304)"
          else
            echo "❌ Expected 304 but got $STATUS"
            exit 1
          fi

      - name: Test Multiple Devices Concurrently
        run: |
          echo "Testing concurrent device operations..."
          
          # Create 5 test devices concurrently
          for i in {1..5}; do
            UUID="concurrent-test-$i-$(date +%s)"
            (
              curl -X PATCH -H "Content-Type: application/json" \
                -d '{"uuid":"'$UUID'","status":"online","services":{},"metrics":{"cpu":'$i'.5,"memory":50}}' \
                http://localhost:3002/api/v1/device/state > /dev/null 2>&1
              echo "Device $i registered"
            ) &
          done
          
          wait
          
          # Verify all devices are listed
          DEVICE_COUNT=$(curl -s http://localhost:3002/api/v1/devices | jq '. | length')
          echo "Total devices registered: $DEVICE_COUNT"
          
          if [ "$DEVICE_COUNT" -gt 0 ]; then
            echo "✅ Concurrent device operations work"
          else
            echo "❌ No devices found"
            exit 1
          fi

      - name: Test 404 Handling
        run: |
          echo "Testing 404 error handling..."
          STATUS=$(curl -s -w "%{http_code}" -o /dev/null http://localhost:3002/nonexistent-endpoint)
          
          if [ "$STATUS" = "404" ]; then
            echo "✅ 404 handling works correctly"
          else
            echo "❌ Expected 404 but got $STATUS"
            exit 1
          fi

      - name: Verify API Logs
        if: always()
        run: |
          echo "Checking if API is still running..."
          if ps -p $API_PID > /dev/null 2>&1; then
            echo "✅ API server is still running (no crashes)"
          else
            echo "❌ API server crashed during tests"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          echo "Stopping API server..."
          kill $API_PID || true
          wait $API_PID 2>/dev/null || true
          echo "Cleanup complete"

      - name: Generate Summary
        if: always()
        run: |
          echo "## Integration Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tests Executed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ API Health Check" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ API Documentation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Cloud Device Management" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ ETag Caching" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Concurrent Operations" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Error Handling (404)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tested Endpoints:" >> $GITHUB_STEP_SUMMARY
          echo "- \`GET /\` - Health check" >> $GITHUB_STEP_SUMMARY
          echo "- \`GET /api/docs\` - Documentation" >> $GITHUB_STEP_SUMMARY
          echo "- \`GET /api/v1/device/:uuid/state\` - Device polling" >> $GITHUB_STEP_SUMMARY
          echo "- \`PATCH /api/v1/device/state\` - Device state reporting" >> $GITHUB_STEP_SUMMARY
          echo "- \`GET /api/v1/devices\` - List devices" >> $GITHUB_STEP_SUMMARY
          echo "- \`POST /api/v1/devices/:uuid/target-state\` - Set target state" >> $GITHUB_STEP_SUMMARY
          echo "- \`GET /api/v1/devices/:uuid/target-state\` - Get target state" >> $GITHUB_STEP_SUMMARY
