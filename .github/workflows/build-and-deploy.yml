name: Build and Update All Customers

on:
  push:
    branches:
      - master
    paths:
      - 'api/**'
      - 'dashboard/**'
      - 'billing-exporter/**'
      - '.github/workflows/build-and-deploy.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    strategy:
      matrix:
        service:
          - name: api
            dockerfile: ./api/Dockerfile
            context: ./api
          - name: dashboard
            dockerfile: ./dashboard/Dockerfile
            context: ./dashboard
          - name: billing-exporter
            dockerfile: ./billing-exporter/Dockerfile
            context: ./billing-exporter
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate version tag
        id: version
        run: |
          # Use short SHA as version
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "tag=v1.0.${GITHUB_RUN_NUMBER}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.service.name }}:${{ steps.version.outputs.tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.service.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.tag }}
            COMMIT=${{ github.sha }}
      
      - name: Output image info
        run: |
          echo "✅ Built and pushed: ${{ matrix.service.name }}:${{ steps.version.outputs.tag }}"
  
  update-image-versions:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up yq
        uses: mikefarah/yq@v4
      
      - name: Generate version tag
        id: version
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "tag=v1.0.${GITHUB_RUN_NUMBER}-${SHORT_SHA}" >> $GITHUB_OUTPUT
      
      - name: Update image versions
        run: |
          # Update all service image tags
          yq eval '.api.image.tag = "${{ steps.version.outputs.tag }}"' -i argocd/shared/image-versions.yaml
          yq eval '.dashboard.image.tag = "${{ steps.version.outputs.tag }}"' -i argocd/shared/image-versions.yaml
          yq eval '.billingExporter.image.tag = "${{ steps.version.outputs.tag }}"' -i argocd/shared/image-versions.yaml
          
          # Also update image repository to use GHCR
          yq eval '.api.image.repository = "${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/api"' -i argocd/shared/image-versions.yaml
          yq eval '.dashboard.image.repository = "${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/dashboard"' -i argocd/shared/image-versions.yaml
          yq eval '.billingExporter.image.repository = "${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/billing-exporter"' -i argocd/shared/image-versions.yaml
          
          cat argocd/shared/image-versions.yaml
      
      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add argocd/shared/image-versions.yaml
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update all customer images to ${{ steps.version.outputs.tag }}

            Updated by GitHub Actions
            Commit: ${{ github.sha }}
            Run: ${{ github.run_number }}"
            
            git push
            
            echo "✅ Image versions updated and pushed to git"
            echo "🚀 ArgoCD will now sync all customer instances automatically"
          fi
      
      - name: Create deployment summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          ## 🚀 Deployment Summary
          
          **Version:** \`${{ steps.version.outputs.tag }}\`
          **Commit:** \`${{ github.sha }}\`
          **Triggered by:** @${{ github.actor }}
          
          ### Images Built
          - \`api:${{ steps.version.outputs.tag }}\`
          - \`dashboard:${{ steps.version.outputs.tag }}\`
          - \`billing-exporter:${{ steps.version.outputs.tag }}\`
          
          ### Next Steps
          1. ✅ Images pushed to GitHub Container Registry
          2. ✅ Image versions updated in \`argocd/shared/image-versions.yaml\`
          3. ⏳ ArgoCD will automatically sync all customer instances (usually within 3 minutes)
          
          ### Verify Deployment
          \`\`\`bash
          # Check ArgoCD sync status
          argocd app list -l app.kubernetes.io/instance=iotistic-customers
          
          # Check specific customer
          argocd app get customer-7f05d0d2
          
          # Force sync if needed
          argocd app sync -l app.kubernetes.io/instance=iotistic-customers
          \`\`\`
          EOF
