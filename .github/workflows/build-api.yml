name: Build and Push API Image

on:
  push:
    branches:
      - master
      - main
      - develop
    paths:
      - 'api/**'
      - '.github/workflows/build-api.yml'
  # Optional: build on new semver tag (release)
  tags:
    - 'v*.*.*'

jobs:
  buildx:
    name: Build & Push API Image
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        include:
          - board: x86
            platform: linux/amd64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache/${{ matrix.board }}
          key: buildx-api-${{ matrix.board }}-${{ github.sha }}
          restore-keys: |
            buildx-api-${{ matrix.board }}-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Generate Docker tags
        id: meta
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          VERSION_TAG="v1.0.${GITHUB_RUN_NUMBER}-${SHORT_SHA}"
          BRANCH_TAG=$(echo "${GITHUB_REF_NAME}" | tr '/' '-')

          # Detect if this is a semver tag push (release)
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            RELEASE_TAG="${GITHUB_REF_NAME}"
            echo "Detected release: ${RELEASE_TAG}"
          else
            RELEASE_TAG=""
          fi

          echo "version_tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "branch_tag=${BRANCH_TAG}" >> $GITHUB_OUTPUT
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT

          echo "Generated tags:"
          echo "  - ${VERSION_TAG}"
          echo "  - ${SHORT_SHA}"
          echo "  - ${BRANCH_TAG}"
          if [[ -n "${RELEASE_TAG}" ]]; then
            echo "  - ${RELEASE_TAG}"
          fi

      - name: Build & Push API image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          platforms: ${{ matrix.platform }}
          cache-from: type=local,src=/tmp/.buildx-cache/${{ matrix.board }}
          cache-to: type=local,dest=/tmp/.buildx-cache/${{ matrix.board }},mode=max
          tags: |
            iotistic/api:${{ steps.meta.outputs.version_tag }}
            iotistic/api:${{ steps.meta.outputs.short_sha }}
            iotistic/api:${{ steps.meta.outputs.branch_tag }}
            iotistic/api:latest
            ${{ steps.meta.outputs.release_tag && format('iotistic/api:{0}', steps.meta.outputs.release_tag) || '' }}
          labels: |
            org.opencontainers.image.title=Iotistic API
            org.opencontainers.image.description=IoT Platform API Service
            org.opencontainers.image.version=${{ steps.meta.outputs.version_tag }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Output pushed image info
        run: |
          echo "âœ… Image successfully built and pushed with the following tags:"
          echo "  - iotistic/api:${{ steps.meta.outputs.version_tag }}"
          echo "  - iotistic/api:${{ steps.meta.outputs.short_sha }}"
          echo "  - iotistic/api:${{ steps.meta.outputs.branch_tag }}"
          if [[ -n "${{ steps.meta.outputs.release_tag }}" ]]; then
            echo "  - iotistic/api:${{ steps.meta.outputs.release_tag }}"
          fi
          echo "  - iotistic/api:latest"
