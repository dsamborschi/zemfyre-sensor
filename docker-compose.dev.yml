services:
    application-manager:
            container_name: application-manager
            build:
                context: ./application-manager
                dockerfile: Dockerfile
            privileged: true
            tty: true
            restart: always
            network_mode: host
            volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - application-manager-data:/app/data
            environment:
            - USE_REAL_DOCKER=true
            - NODE_ENV=production
            - DATABASE_PATH=/app/data/database.sqlite
            - MQTT_BROKER=mqtt://mosquitto:1883
            - ENABLE_FILE_LOGGING=false
            - MAX_LOGS=500
    nginx:
        image: nginx
        ports:
        - "80:80"
        command: ["nginx", "-g", "daemon off;"]
        restart: unless-stopped
        volumes:
        - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
        networks:
           - zemfyre-net
    mosquitto:
        image: eclipse-mosquitto
        restart: always
        ports:
          - "${MOSQUITTO_PORT_EXT:-1883}:1883"
          - "${MOSQUITTO_WS_PORT_EXT:-59001}:9001"
        volumes:
          - ./mosquitto/config:/mosquitto/config/
        networks:
           - zemfyre-net
    nodered:
        build:
            context: ./nodered
            dockerfile: Dockerfile
        restart: always
        ports:
            - "${NODERED_PORT_EXT:-51880}:1880"
        volumes:
            - ./nodered/data:/data
            - ./nodered/nodes:/data/nodes
            - /data/node_modules
        networks:
           - zemfyre-net

    influx:
        container_name: influxdb
        image: influxdb:alpine
        restart: always
        environment:
            - INFLUXDB_INIT_ORG=Zemfyre
            - INFLUXDB_INIT_BUCKET=ZUS80LP
            - INFLUXDB_LOG_LEVEL=debug
        ports:
            - "${INFLUXDB_PORT_EXT:-58086}:8086"
        volumes:
            - ./influx/data:/var/lib/influxdb2
            - ./influx/config:/etc/influxdb2
        networks:
           - zemfyre-net

    grafana:
        build:
           context: ./grafana
           dockerfile: Dockerfile
        depends_on:
            - influx
        container_name: grafana
        restart: always
   
        user: "grafana"
        environment:
            - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
            - GF_AUTH_ANONYMOUS_ENABLED=${GRAFANA_AUTH_ANONYMOUS_ENABLED}
            - GF_AUTH_ANONYMOUS_ORG_ROLE=${GRAFANA_AUTH_ANONYMOUS_ORG_ROLE}
            - GF_AUTH_DISABLE_LOGIN_FORM=${GRAFANA_AUTH_DISABLE_LOGIN_FORM}
            - GF_HTTP_ALLOW_ORIGIN=*
        ports:
            - "${GRAFANA_PORT_EXT:-53000}:3000"
        networks:
           - zemfyre-net

    portainer:
        image: portainer/portainer-ce:latest
        container_name: portainer
        restart: always
        ports:
            - "${PORT_PORT_EXT:-59000}:9000"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./portainer/data:/data
        networks:
           - zemfyre-net

    admin:
        build:
           context: ./admin
           dockerfile: Dockerfile
        container_name: admin
        restart: always
        environment:
            - APP_MANAGER_API=http://localhost:3002/api/v1
            - USE_MOCK_DATA=true
        ports:
            - "${ADMIN_PORT_EXT:-51850}:80"
        networks:
           - zemfyre-net
    api:
        build:
            context: ./api
            dockerfile: Dockerfile
        container_name: zemfyre-api
        restart: always
        environment:
            - GRAFANA_API_TOKEN=${GRAFANA_API_TOKEN}
            - DISPLAY=${DISPLAY}
            - DBUS_SESSION_BUS_ADDRESS=${DBUS_SESSION_BUS_ADDRESS}
        volumes:
          - /tmp/.X11-unix:/tmp/.X11-unix  # for X11
          - /run/user/1000/bus:/run/user/1000/bus  # for D-Bus socket
          - /var/run/docker.sock:/var/run/docker.sock
        user: "1000:1000"
        ports:
            - "${API_PORT_EXT:-53001}:3001"
        networks:
           - zemfyre-net
volumes:
  application-manager-data:
    driver: local
 
networks:
  zemfyre-net:
    driver: bridge


