services:
    agent:
            container_name: agent
            build:
                context: ./agent
                dockerfile: Dockerfile
            privileged: true
            pid: "host"
            tty: true
            restart: always
            network_mode: host
            volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - application-manager-data:/app/data
            environment:
            - NODE_ENV=production
            - DATABASE_PATH=/app/data/database.sqlite
            - MQTT_BROKER=mqtt://mosquitto:1883
            - ENABLE_FILE_LOGGING=false
            - MAX_LOGS=500
            - CLOUD_API_ENDPOINT=http://localhost:3002
            - DEVICE_API_PORT=48484
            # SSH Reverse Tunnel (Remote Access)
            - ENABLE_REMOTE_ACCESS=${ENABLE_REMOTE_ACCESS:-false}
            - CLOUD_HOST=${CLOUD_HOST:-}
            - CLOUD_SSH_PORT=${CLOUD_SSH_PORT:-22}
            - SSH_TUNNEL_USER=${SSH_TUNNEL_USER:-tunnel}
            - SSH_KEY_PATH=${SSH_KEY_PATH:-/app/data/ssh/id_rsa}
            - SSH_AUTO_RECONNECT=${SSH_AUTO_RECONNECT:-true}
            - SSH_RECONNECT_DELAY=${SSH_RECONNECT_DELAY:-5000}

    ml-service:
        build:
           context: ./ml-service
           dockerfile: Dockerfile
        container_name: ml-service
        restart: always
        environment:
            - DB_HOST=postgres
            - DB_PORT=5432
            - DB_NAME=${DB_NAME:-iotistic}
            - DB_USER=${DB_USER:-postgres}
            - DB_PASSWORD=${DB_PASSWORD:-postgres}
            - ML_SERVICE_PORT=5000
            - MODEL_DIR=/app/models/saved
            - MIN_TRAINING_SAMPLES=100
            - ISOLATION_FOREST_CONTAMINATION=0.01
            - LSTM_SEQUENCE_LENGTH=50
            - LSTM_FORECAST_HORIZON=12
        ports:
            - "5000:5000"
        volumes:
            - ml-models:/app/models/saved
        networks:
           - Iotistic-net
        depends_on:
            - postgres
        healthcheck:
            test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health')"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 30s

    
volumes:
  ml-models:
    driver: local
 
networks:
  Iotistic-net:
    driver: bridge


