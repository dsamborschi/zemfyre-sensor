{{- if and .Values.monitoring.enabled .Values.monitoring.dedicated .Values.monitoring.grafana.enabled }}
---
# Dedicated Grafana for Enterprise tier customers with dedicated monitoring
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "customer-instance.fullname" . }}-grafana-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "customer-instance.labels" . | nindent 4 }}
data:
  grafana.ini: |
    [analytics]
    check_for_updates = false
    reporting_enabled = false
    
    [security]
    admin_user = {{ .Values.monitoring.grafana.adminUser }}
    admin_password = {{ .Values.monitoring.grafana.adminPassword }}
    
    [auth.anonymous]
    enabled = false
    
    [paths]
    data = /var/lib/grafana
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "customer-instance.fullname" . }}-grafana-datasources
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "customer-instance.labels" . | nindent 4 }}
data:
  datasource.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://{{ include "customer-instance.fullname" . }}-prometheus:9090
      isDefault: true
      editable: false
      jsonData:
        httpMethod: POST
        timeInterval: {{ .Values.monitoring.scrapeInterval }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "customer-instance.fullname" . }}-grafana-dashboards-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "customer-instance.labels" . | nindent 4 }}
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "customer-instance.fullname" . }}-grafana-dashboard
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "customer-instance.labels" . | nindent 4 }}
data:
  iot-overview.json: |
    {
      "dashboard": {
        "title": "IoT Instance Overview - {{ .Values.customer.company }}",
        "uid": "iot-overview",
        "tags": ["iot", "customer"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "API Request Rate",
            "type": "graph",
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0},
            "targets": [
              {
                "expr": "rate(http_requests_total{customer_id=\"{{ .Values.customer.id }}\"}[5m])",
                "legendFormat": "{{`{{ method }}`}} {{`{{ path }}`}}"
              }
            ]
          },
          {
            "id": 2,
            "title": "MQTT Messages/sec",
            "type": "graph",
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0},
            "targets": [
              {
                "expr": "rate(mqtt_messages_total{customer_id=\"{{ .Values.customer.id }}\"}[5m])",
                "legendFormat": "{{`{{ topic }}`}}"
              }
            ]
          },
          {
            "id": 3,
            "title": "Connected Devices",
            "type": "stat",
            "gridPos": {"h": 4, "w": 6, "x": 0, "y": 8},
            "targets": [
              {
                "expr": "mqtt_clients_connected{customer_id=\"{{ .Values.customer.id }}\"}",
                "instant": true
              }
            ]
          },
          {
            "id": 4,
            "title": "Database Connections",
            "type": "stat",
            "gridPos": {"h": 4, "w": 6, "x": 6, "y": 8},
            "targets": [
              {
                "expr": "pg_stat_activity_count{customer_id=\"{{ .Values.customer.id }}\"}",
                "instant": true
              }
            ]
          },
          {
            "id": 5,
            "title": "Memory Usage",
            "type": "graph",
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 12},
            "targets": [
              {
                "expr": "container_memory_usage_bytes{customer_id=\"{{ .Values.customer.id }}\"}",
                "legendFormat": "{{`{{ container }}`}}"
              }
            ]
          },
          {
            "id": 6,
            "title": "CPU Usage",
            "type": "graph",
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 12},
            "targets": [
              {
                "expr": "rate(container_cpu_usage_seconds_total{customer_id=\"{{ .Values.customer.id }}\"}[5m])",
                "legendFormat": "{{`{{ container }}`}}"
              }
            ]
          }
        ],
        "time": {"from": "now-6h", "to": "now"},
        "refresh": "30s"
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "customer-instance.fullname" . }}-grafana
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "customer-instance.labels" . | nindent 4 }}
    app.kubernetes.io/component: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "customer-instance.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: grafana
  template:
    metadata:
      labels:
        {{- include "customer-instance.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - name: http
          containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: {{ .Values.monitoring.grafana.adminUser | quote }}
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: {{ .Values.monitoring.grafana.adminPassword | quote }}
        - name: GF_INSTALL_PLUGINS
          value: ""
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: config
          mountPath: /etc/grafana
        - name: datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: dashboards
          mountPath: /var/lib/grafana/dashboards
        - name: storage
          mountPath: /var/lib/grafana
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: {{ include "customer-instance.fullname" . }}-grafana-config
      - name: datasources
        configMap:
          name: {{ include "customer-instance.fullname" . }}-grafana-datasources
      - name: dashboards-config
        configMap:
          name: {{ include "customer-instance.fullname" . }}-grafana-dashboards-config
      - name: dashboards
        configMap:
          name: {{ include "customer-instance.fullname" . }}-grafana-dashboard
      - name: storage
        persistentVolumeClaim:
          claimName: {{ include "customer-instance.fullname" . }}-grafana-storage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "customer-instance.fullname" . }}-grafana-storage
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "customer-instance.labels" . | nindent 4 }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  {{- if .Values.postgres.storage.storageClass }}
  storageClassName: {{ .Values.postgres.storage.storageClass }}
  {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "customer-instance.fullname" . }}-grafana
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "customer-instance.labels" . | nindent 4 }}
    app.kubernetes.io/component: grafana
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: 3000
    protocol: TCP
  selector:
    {{- include "customer-instance.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: grafana
{{- end }}
