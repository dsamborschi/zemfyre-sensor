{{- if .Values.mosquitto.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "customer-instance.fullname" . }}-mosquitto-config
  labels:
    {{- include "customer-instance.labels" . | nindent 4 }}
    app.kubernetes.io/component: mqtt
data:
  mosquitto.conf: |
    # Mosquitto configuration with Go-Auth plugin
    # PostgreSQL backend for authentication and ACL
    
    # Basic Mosquitto settings
    listener {{ .Values.mosquitto.ports.mqtt }} 0.0.0.0
    protocol mqtt
    
    listener {{ .Values.mosquitto.ports.websocket }} 0.0.0.0
    protocol websockets
    
    # Disable anonymous access (require authentication)
    allow_anonymous {{ .Values.mosquitto.auth.allowAnonymous }}
    
    # Logging
    log_dest stdout
    log_type error
    log_type warning
    log_type notice
    log_type information
    
    # System statistics publishing (required for metrics exporter)
    # Publishes broker stats to $SYS/# topics every 10 seconds
    sys_interval 10
    
    # Load Go-Auth plugin
    auth_plugin /mosquitto/go-auth.so
    
    # Backend configuration
    auth_opt_backends postgres
    
    # PostgreSQL connection settings
    # Using environment variables for sensitive data
    auth_opt_pg_host {{ include "customer-instance.fullname" . }}-postgres
    auth_opt_pg_port 5432
    auth_opt_pg_dbname ${DB_NAME}
    auth_opt_pg_user ${DB_USER}
    auth_opt_pg_password ${DB_PASSWORD}
    auth_opt_pg_sslmode disable
    
    # User authentication query
    # Returns password_hash for the given username
    auth_opt_pg_userquery SELECT password_hash FROM mqtt_users WHERE username = $1 AND is_active = true LIMIT 1
    
    # ACL check query for mosquitto-go-auth with PostgreSQL
    # Parameters passed by mosquitto-go-auth: $1 = username, $2 = acc
    # The plugin will pattern-match returned topics against the requested topic
    # access column values: 1=read, 2=write, 3=read+write, 4=subscribe
    auth_opt_pg_aclquery SELECT topic FROM mqtt_acls WHERE username = $1 AND (access & $2) != 0
    
    # Superuser query (optional - returns 1 if user is superuser)
    auth_opt_pg_superquery SELECT COUNT(*) FROM mqtt_users WHERE username = $1 AND is_superuser = true
    
    # Password hashing configuration for mosquitto-go-auth
    auth_opt_hasher {{ .Values.mosquitto.auth.hasher }}
    auth_opt_hasher_cost {{ .Values.mosquitto.auth.hasherCost }}
    auth_opt_hasher_salt_size 16
    
    # Logging level
    auth_opt_log_level {{ .Values.mosquitto.auth.logLevel }}
    auth_opt_log_dest stdout
    
    # Persistence
    persistence true
    persistence_location /mosquitto/data/
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "customer-instance.fullname" . }}-mosquitto
  labels:
    {{- include "customer-instance.labels" . | nindent 4 }}
    app.kubernetes.io/component: mqtt
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "customer-instance.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: mqtt
  template:
    metadata:
      labels:
        {{- include "customer-instance.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: mqtt
    spec:
      restartPolicy: Always
      initContainers:
      - name: config-init
        image: alpine:latest
        command:
        - sh
        - -c
        - |
          apk add --no-cache gettext
          envsubst < /config-template/mosquitto.conf > /config-processed/mosquitto.conf
          cat /config-processed/mosquitto.conf
        env:
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: POSTGRES_DB
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: config-template
          mountPath: /config-template
        - name: config-processed
          mountPath: /config-processed
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
      containers:
      - name: mosquitto
        image: "{{ .Values.mosquitto.image.repository }}:{{ .Values.mosquitto.image.tag }}"
        command: ["/usr/sbin/mosquitto"]
        args: ["-c", "/mosquitto/config/mosquitto.conf"]
        ports:
        - name: mqtt
          containerPort: {{ .Values.mosquitto.ports.mqtt }}
        - name: websocket
          containerPort: {{ .Values.mosquitto.ports.websocket }}
        env:
        - name: DB_HOST
          value: {{ include "customer-instance.fullname" . }}-postgres
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: POSTGRES_DB
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: config-processed
          mountPath: /mosquitto/config
        - name: data
          mountPath: /mosquitto/data
        resources:
          {{- toYaml .Values.mosquitto.resources | nindent 10 }}
        livenessProbe:
          tcpSocket:
            port: {{ .Values.mosquitto.ports.mqtt }}
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: {{ .Values.mosquitto.ports.mqtt }}
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config-template
        configMap:
          name: {{ include "customer-instance.fullname" . }}-mosquitto-config
      - name: config-processed
        emptyDir: {}
      - name: data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "customer-instance.fullname" . }}-mosquitto
  labels:
    {{- include "customer-instance.labels" . | nindent 4 }}
    app.kubernetes.io/component: mqtt
spec:
  type: {{ .Values.mosquitto.serviceType }}
  ports:
  - name: mqtt
    port: {{ .Values.mosquitto.ports.mqtt }}
    targetPort: mqtt
    {{- if eq .Values.mosquitto.serviceType "NodePort" }}
    nodePort: {{ .Values.mosquitto.nodePorts.mqtt }}
    {{- end }}
  - name: websocket
    port: {{ .Values.mosquitto.ports.websocket }}
    targetPort: websocket
    {{- if eq .Values.mosquitto.serviceType "NodePort" }}
    nodePort: {{ .Values.mosquitto.nodePorts.websocket }}
    {{- end }}
  selector:
    {{- include "customer-instance.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: mqtt
{{- end }}
