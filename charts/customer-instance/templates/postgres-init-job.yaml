{{- if and .Values.postgres.enabled .Values.mosquitto.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "customer-instance.fullname" . }}-postgres-init
  labels:
    {{- include "customer-instance.labels" . | nindent 4 }}
    app.kubernetes.io/component: init
spec:
  ttlSecondsAfterFinished: 300
  backoffLimit: 10
  template:
    metadata:
      labels:
        {{- include "customer-instance.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: init
    spec:
      restartPolicy: OnFailure
      containers:
      - name: init-mqtt-schema
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          set -e
          
          echo "‚è≥ Waiting for Postgres to be ready..."
          until pg_isready -h {{ include "customer-instance.fullname" . }}-postgres -p 5432 -U ${POSTGRES_USER}; do
            echo "Postgres is unavailable - sleeping"
            sleep 2
          done
          echo "‚úÖ Postgres is ready!"
          
          echo "üì¶ Installing Python and bcrypt..."
          apk add --no-cache python3 py3-pip > /dev/null 2>&1
          pip3 install bcrypt --break-system-packages > /dev/null 2>&1
          
          echo "üîê Generating MQTT password hash..."
          MQTT_PASSWORD_HASH=$(python3 -c "import bcrypt; print(bcrypt.hashpw(b'${MQTT_PASSWORD}', bcrypt.gensalt(10)).decode('utf-8'))")
          
          echo "üóÑÔ∏è Initializing database..."
          psql "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@{{ include "customer-instance.fullname" . }}-postgres:5432/${POSTGRES_DB}" <<EOF
          -- Enable UUID extension (required for API migrations)
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
          EOF
          
          echo "‚è≥ Waiting for API to run migrations..."
          # Wait up to 3 minutes for mqtt_users table to be created by API migrations
          for i in {1..36}; do
            if psql "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@{{ include "customer-instance.fullname" . }}-postgres:5432/${POSTGRES_DB}" -c "\dt mqtt_users" 2>/dev/null | grep -q mqtt_users; then
              echo "‚úÖ Migrations complete, mqtt_users table exists!"
              break
            fi
            echo "Waiting for migrations... (\$i/36)"
            sleep 5
          done
          
          echo "üîê Creating MQTT admin user..."
          psql "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@{{ include "customer-instance.fullname" . }}-postgres:5432/${POSTGRES_DB}" <<EOF
          -- Insert or update API admin user (tables created by migration 017)
          INSERT INTO mqtt_users (username, password_hash, is_superuser, is_active)
          VALUES ('${MQTT_USERNAME}', '${MQTT_PASSWORD_HASH}', TRUE, TRUE)
          ON CONFLICT (username) 
          DO UPDATE SET 
            password_hash = EXCLUDED.password_hash,
            is_superuser = TRUE,
            is_active = TRUE;
          
          -- Grant full access to all topics for admin user
          INSERT INTO mqtt_acls (username, topic, access, priority)
          VALUES ('${MQTT_USERNAME}', '#', 7, 100)
          ON CONFLICT (username, topic) 
          DO UPDATE SET 
            access = 7,
            priority = 100;
          
          EOF
          
          echo "‚úÖ MQTT admin user '${MQTT_USERNAME}' created successfully!"
          echo "‚úÖ Schema initialization complete!"
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: POSTGRES_DB
        - name: MQTT_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: MQTT_USERNAME
        - name: MQTT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: MQTT_PASSWORD
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
{{- end }}
