{{- if .Values.api.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "customer-instance.fullname" . }}-api
  labels:
    {{- include "customer-instance.labels" . | nindent 4 }}
    app.kubernetes.io/component: api
spec:
  replicas: {{ .Values.api.replicas }}
  selector:
    matchLabels:
      {{- include "customer-instance.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        {{- include "customer-instance.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: api
    spec:
      containers:
      - name: api
        image: "{{ .Values.api.image.repository }}:{{ .Values.api.image.tag }}"
        ports:
        - name: http
          containerPort: {{ .Values.api.port }}
        env:
        # License key and public key
        - name: IOTISTIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: IOTISTIC_LICENSE_KEY
        - name: LICENSE_PUBLIC_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: LICENSE_PUBLIC_KEY
        # Database connection
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: DATABASE_URL
        - name: DB_HOST
          value: {{ include "customer-instance.fullname" . }}-postgres
        - name: DB_PORT
          value: "5432"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: POSTGRES_PASSWORD
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: POSTGRES_DB
        # MQTT connection (internal API use)
        - name: MQTT_BROKER_URL
          value: mqtt://{{ include "customer-instance.fullname" . }}-mosquitto:{{ .Values.mosquitto.ports.mqtt }}
        - name: MQTT_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: MQTT_USERNAME
        - name: MQTT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: MQTT_PASSWORD
        # MQTT broker configuration (for device provisioning responses)
        # These env vars override database defaults - allows external brokers
        # For NodePort (Docker Desktop): use localhost:nodePort
        # For ClusterIP (production): use ingress.host:1883
        - name: MQTT_BROKER_HOST
          {{- if eq .Values.mosquitto.serviceType "NodePort" }}
          value: "localhost"
          {{- else }}
          value: {{ if .Values.mqtt.broker.host }}{{ .Values.mqtt.broker.host | quote }}{{ else }}{{ .Values.ingress.host | quote }}{{ end }}
          {{- end }}
        - name: MQTT_BROKER_PORT
          {{- if eq .Values.mosquitto.serviceType "NodePort" }}
          value: {{ .Values.mosquitto.nodePorts.mqtt | quote }}
          {{- else }}
          value: {{ if .Values.mqtt.broker.port }}{{ .Values.mqtt.broker.port | quote }}{{ else }}{{ .Values.mosquitto.ports.mqtt | quote }}{{ end }}
          {{- end }}
        - name: MQTT_BROKER_PROTOCOL
          value: {{ if .Values.mqtt.broker.protocol }}{{ .Values.mqtt.broker.protocol | quote }}{{ else }}"mqtt"{{ end }}
        - name: MQTT_BROKER_USE_TLS
          value: {{ if .Values.mqtt.broker.useTls }}{{ .Values.mqtt.broker.useTls | quote }}{{ else }}"false"{{ end }}
        # Customer info
        - name: CUSTOMER_ID
          valueFrom:
            secretKeyRef:
              name: {{ include "customer-instance.fullname" . }}-secrets
              key: CUSTOMER_ID
        # App config
        - name: PORT
          value: {{ .Values.api.port | quote }}
        - name: NODE_ENV
          value: {{ .Values.api.env.NODE_ENV | quote }}
        - name: LOG_LEVEL
          value: {{ .Values.api.env.LOG_LEVEL | quote }}
        resources:
          {{- toYaml .Values.api.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "customer-instance.fullname" . }}-api
  labels:
    {{- include "customer-instance.labels" . | nindent 4 }}
    app.kubernetes.io/component: api
spec:
  type: ClusterIP
  ports:
  - name: http
    port: {{ .Values.api.port }}
    targetPort: http
  selector:
    {{- include "customer-instance.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: api
{{- end }}
