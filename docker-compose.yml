# Docker Compose configuration for Cloud API and PostgreSQL backend
# 
# Usage:
#   docker-compose -f docker-compose.cloud.yml up -d
#
# This stack provides:
#   - PostgreSQL 16 database for persistent device state storage
#   - Iotistic API server with Balena-style endpoints
#
# Environment variables (configure in .env):
#   - DB_PASSWORD=<password>    # PostgreSQL password
#   - DB_PORT_EXT=5432          # External PostgreSQL port
#   - API_PORT_EXT=3002         # External API port
#   - GRAFANA_API_TOKEN=<token> # For Grafana integration

services:
    postgres:
        image: postgres:16-alpine
        container_name: iotistic-postgres
        restart: unless-stopped
        environment:
            - POSTGRES_DB=${POSTGRES_DB:-iotistic}
            - POSTGRES_USER=${POSTGRES_USER:-postgres}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
        ports:
            - "5432:5432"
        volumes:
            - iotistic-pg-data:/var/lib/postgresql/data
            - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
            - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
        command: >
            postgres
            -c config_file=/etc/postgresql/postgresql.conf
            -c hba_file=/etc/postgresql/pg_hba.conf
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
           - iotistic-net

    api:
        build:
            context: ./api
            dockerfile: Dockerfile
        container_name: iotistic-api
        restart: always
        tty: true
        stdin_open: true
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"
        environment:
            - PORT=${PORT:-3002}
            - NODE_ENV=${NODE_ENV:-development}
            - DB_HOST=${DB_HOST:-postgres}
            - DB_PORT=${DB_PORT:-5432}
            - DB_NAME=${DB_NAME:-iotistic}
            - DB_USER=${DB_USER:-postgres}
            - DB_PASSWORD=${DB_PASSWORD:-postgres}
            - DB_POOL_SIZE=${DB_POOL_SIZE:-20}
            - FORCE_COLOR=${FORCE_COLOR:-1}
            - MQTT_BROKER_URL=${MQTT_BROKER_URL:-mqtt://mosquitto:1883}
            - MQTT_USERNAME=${MQTT_USERNAME:-admin}
            - MQTT_PASSWORD=${MQTT_PASSWORD:-iotistic42!}
            - MQTT_PERSIST_TO_DB=${MQTT_PERSIST_TO_DB:-true}
            - MQTT_DB_SYNC_INTERVAL=${MQTT_DB_SYNC_INTERVAL:-10000}
            - LOG_COMPRESSION=${LOG_COMPRESSION:-true}
            - LICENSE_PUBLIC_KEY=${LICENSE_PUBLIC_KEY}
            - IOTISTIC_LICENSE_KEY=${IOTISTIC_LICENSE_KEY}
        ports:
            - "${API_PORT_EXT:-4002}:3002"
        depends_on:
            postgres:
                condition: service_healthy
        networks:
           - iotistic-net
    mosquitto:
        image: iegomez/mosquitto-go-auth
        restart: always
        environment:
            - DB_HOST=${DB_HOST:-postgres}
            - DB_PORT=${DB_PORT:-5432}
            - DB_NAME=${DB_NAME:-iotistic}
            - DB_USER=${DB_USER:-postgres}
            - DB_PASSWORD=${DB_PASSWORD:-postgres}
        ports:
          - "${MOSQUITTO_PORT_EXT:-5883}:1883"
          - "${MOSQUITTO_WS_PORT_EXT:-59002}:9001"
        volumes:
          - ./mosquitto/mosquitto.conf:/etc/mosquitto/mosquitto.conf
        depends_on:
            postgres:
                condition: service_healthy
        networks:
           - iotistic-net

volumes:
  iotistic-pg-data:
    driver: local
 
networks:
  iotistic-net:
    driver: bridge
